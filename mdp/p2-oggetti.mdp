title: Funzioni e oggetti
subtitle: Introduzione alla programmazione
figure: images/oop/balls.png

---

title: Definizione di funzioni
figure: images/fun/function.png

- *Operatore*, applicato a *operandi*, per ottenere un *risultato*
    - **`def`** per definire una funzione
    - **`return`** per terminare e restituire un risultato

code: py

    def hypotenuse(a, b):
        c = (a ** 2 + b ** 2) ** 0.5
        return c

---

title: Chiamata di funzioni

- **`def`** definisce una funzione, ma non la esegue!
- Bisogna *chiamarla*
- Funzione, quando eseguita, crea nuovo *spazio di nomi*
    - Parametri e variabili hanno **ambito locale**
    - Non visibili nel resto del programma
    - Nomi uguali, definiti in ambiti diversi, restano distinti

code: py

    side1 = float(input("1st side? "))
    side2 = float(input("2nd side? "))
    side3 = hypotenuse(side1, side2)
    print("3rd side:", side3)

---

title: Funzione main

- A volte si preferisce creare una *funzione principale*
    - In questo modo si limitano le **variabili globali**

code: py

    def hypotenuse(a, b):
        c = (a ** 2 + b ** 2) ** 0.5
        return c

    def main():
        side1 = float(input("1st side? "))
        side2 = float(input("2nd side? "))
        side3 = hypotenuse(side1, side2)
        print("3rd side:", side3)

    main()  ## remove, if importing the module elsewhere

>

<http://www.ce.unipr.it/brython/?p2_fun_hypotenuse.py>

---

title: Parametri di funzioni

- **Parametri formali**: nomi usati nella *definizione*
- **Parametri effettivi**: oggetti passati alla funz.
- Parametri passati “*per oggetto*”
    - Variabili all'esterno: non vengono modificate
    - Liste e oggetti passati ad una funz.: modifiche *permanenti*
- Si possono restituire più valori, come *tupla*
    - `return 7, 5, "black"`

code: py

    def inc(a):
        a += 1
        print(a)  # just for debug
    x = 10
    inc(x)
    print(x)      # just for debug

---

title: ⏩ Documentazione di funzioni

- **Annotazioni**: utili per documentare il tipo di param. e valore di ritorno (ma non c'è verifica!)
- **Docstring**: descrizione testuale di una funzione
- **`help`**: funzione per visualizzare la documentazione

code: py

    def hypotenuse(leg1: float, leg2: float) -> float:
        '''
        Return the hypotenuse of a right triangle,
        given both its legs (catheti).
        '''
        return (leg1 ** 2 + leg2 ** 2) ** 0.5

>

<https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html>

---

title: Cicli e annidamento
figure: images/fun/multiplication-table.jpg

code: py

    size = 10
    y = int(input("Insert a value: "))
    for x in range(1, size + 1):
        print(x * y, end="\t")  # ends with tabulation
                                # instead of newline
code: py

    size = 10
    for y in range(1, size + 1):
        for x in range(1, size + 1):
            print(x * y, end="\t")
        print()

>

<http://www.ce.unipr.it/brython/?p2_for_tables.py>

<>

---

title: Procedura

- Funzione senza `return`, solo I/O ed effetti collaterali
    - *Astrazione*, per riuso e leggibilità
    - Riduce i livelli di annidamento

code: py

    def print_row(y: int, size: int):
        for x in range(1, size + 1):
            print(x * y, end="\t")
        print()

    def print_table(size: int):
        for y in range(1, size + 1):
            print_row(y, size)

    def main():
        print_table(10)

---

title: Animazione
figure: images/oop/anim-right.png

code: py

    x, y, dx = 50, 50, 5
    ARENA_W, ARENA_H = 480, 360
    image = g2d.load_image("ball.png")

    def tick():
        global x
        ##if g2d.key_pressed("Enter"): ...
        ##if x + dx > ARENA_W: ...
        g2d.clear_canvas()             # Draw background
        g2d.draw_image(image, (x, y))  # Draw foreground
        x += dx                        # Update ball's position

    def main():
        g2d.init_canvas((ARENA_W, ARENA_H))
        g2d.main_loop(tick)  # call tick 30 times/second

>

<http://www.ce.unipr.it/brython/?p2_fun_anim.py>

---

title: Tick, tastiera e mouse

- **`g2d.main_loop`**: *ciclo di gestione degli eventi*
    - Parametro opzionale: funzione che sarà chiamata periodicamente
- **`g2d.key_pressed`**: *controllo se un tasto è stato premuto*
    - Risultato: `bool`
    - Parametro: `str` nome del tasto
    - Es.: `"q", "1", "ArrowLeft", "Enter", "Spacebar", "LeftButton"`
- **`g2d.key_released`**: *controllo se un tasto è stato rilasciato*
    - Stessi parametri e risultato
- **`g2d.mouse_position`**: *posizione del mouse*
    - Risultato: `(int, int)`

>

<https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values>

---

title: Funzione per rimbalzi
figure: images/oop/anim-bounce.png

- Le funzioni forniscono limitata astrazione
    - Incapsulano il comportamento
    - Ma espongono i dati

code: py

    def move_ball(x: int, y: int,
                  dx: int, dy: int) -> (int, int, int, int):
        if x + dx < 0 or x + dx + BALL_W > ARENA_W:
            dx = -dx
        x += dx
        if y + dy < 0 or y + dy + BALL_H > ARENA_H:
            dy = -dy
        y += dy
        return x, y, dx, dy

<http://www.ce.unipr.it/brython/?p2_fun_ball.py>

---

title: 🤔 Effetti collaterali

- Modifica di oggetti passati come parametri o variabili globali, operazioni di lettura/scrittura...
- Annullano la **trasparenza referenziale**
    - Impossibile semplificare, sostituendo una chiamata a funzione col suo valore di ritorno (es. presenti operazioni di I/O)
- Rendono la funzione **non idempotente**
    - Chiamata più volte, con gli stessi parametri, restituisce risultati diversi
- → Difficile fare verifiche matematiche
    - `z = f(sqrt(2), sqrt(2))`
    - `s = sqrt(2)` <br> `z = f(s, s)`

---

title: 🤔 Funzioni non idempotenti

- Esempio di semplificazione
    - `p = rq(x) + rq(y) * (rq(x) – rq(x))`
    - `p = rq(x) + rq(y) * (0)`
    - `p = rq(x) + 0`
    - `p = rq(x)`
- Ma se `rq` ha effetti collaterali, non si può!

code: py

    base_value = 0  # global variable

    def rq(x: int) -> int:
        global base_value
        base_value += 1
        return x + base_value

>

Ad esempio, con `x = 3` e `y = 4` i due risultati sono `-2` e `4`

---

title: Oggetti
class: segue dark

---

title: Oggetto
figure: images/oop/basic-object.svg

- Rappresenta un *oggetto fisico* o un *concetto* del dominio
- Memorizza il suo **stato** interno in *campi privati*
    - *Incapsulamento (black box)*
- Offre un insieme di **servizi**, come *metodi pubblici*
    - Realizza un *tipo di dato astratto (ADT)*

---

title: Classi ed oggetti
figure: images/oop/cookie-cutter.png

- Ogni *oggetto* ha una **classe** di origine
    - La classe dà la stessa forma iniziale (campi e metodi) a tutti i suoi oggetti
- Ma ogni *oggetto* ha la sua **identità**
    - Stato e locazione in memoria distinti da quelli di altri oggetti
    - Sia instanze di classi diverse che della stessa classe

---

title: Definizione della classe
figure: images/oop/ball-object.svg images/oop/ball-uml.svg
figcaption: Class diagram UML

- **Incapsulamento** dei dati: *convenzione* sui nomi
    - Prefisso `_` per i nomi dei *campi privati*

> We're all consenting adults here. *(GvR)*

code: py

    class Ball:

        def __init__(self, x: int, y: int):
            self._x = x
            self._y = y
            self._dx = 5
            self._dy = 5
        # ...

---

title: Costruzione oggetti
figure: images/oop/bob-builder.jpg

- **`__init__`**: metodo *inizializzatore*
    - Eseguito automaticamente alla creazione di un oggetto
    - *Instantiation is initialization*
- **`self`**: primo parametro di tutti i metodi
    - Non bisogna passare un valore esplicito
    - Assegnato l'oggetto di cui si chiama il metodo
    - Permette ai metodi di accedere ai campi

code: py

    ball = Ball(40, 80)  # Allocation and initialization

---

title: Metodi
figure: images/oop/anim-bounce.png

- Espongono *servizi* ad altri oggetti

code: py

    ARENA_W, ARENA_H = 320, 240
    BALL_W, BALL_H = 20, 20

    class Ball:
        # ...
        def move(self):
            if not (0 <= self._x + self._dx <= ARENA_W - BALL_W):
                self._dx = -self._dx
            if not (0 <= self._y + self._dy <= ARENA_H - BALL_H):
                self._dy = -self._dy
            self._x += self._dx
            self._y += self._dy

        def position(self) -> (int, int, int, int):
            return self._x, self._y, BALL_W, BALL_H

---

title: Uso degli oggetti
figure: images/oop/balls.png

code: py

    # Create two objects, instances of the Ball class
    b1 = Ball(140, 180)
    b2 = Ball(180, 140)

    for i in range(25):
        b1.move()
        b2.move()
        print("b1 @", b1.position(),
              "b2 @", b2.position())

>

<http://www.ce.unipr.it/brython/?p2_oop_ball.py>

---

title: Il primo parametro, self

- Il primo parametro di ogni metodo si chiama `self` (per convenzione)
- L'oggetto, di cui viene invocato il metodo, viene assegnato come valore di `self`
- In Python, una chiamata a metodo è interpretata così:

code: py

    b1 = Ball(40, 80)
    b1.move()

code: py

    # Python internals, DON'T do this!
    b1 = object.__new__(Ball)
    Ball.__init__(b1, 40, 80)
    Ball.move(b1)

---

title: Animazione di due palline

code: py

    b1 = Ball(40, 80)
    b2 = Ball(80, 40)

    def tick():
        g2d.clear_canvas()  # BG
        b1.move()
        b2.move()
        g2d.fill_rect(b1.position())  # FG
        g2d.fill_rect(b2.position())  # FG

    def main():
        g2d.init_canvas((ARENA_W, ARENA_H))
        g2d.main_loop(tick)

>

<http://www.ce.unipr.it/brython/?p2_oop_ball_anim.py>

---

title: Variabili locali, parametri, campi

- *Campi*: memorizzano i dati caratteristici di una istanza
    - Ogni pallina ha la sua posizione `(x, y)` e la sua direzione `(dx, dy)`
- *Parametri*: passano altri valori ad un metodo
    - Se alcuni dati necessari non sono nei campi
- *Variabili locali*: memorizzano risultati parziali
    - Generati durante l'elaborazione del metodo
    - Nomi cancellati dopo l'uscita dal metodo
- *Variabili globali*: definite fuori da tutte le funzioni
    - Usare sono se strettamente necessario
    - Meglio avere qualche parametro in più, per le funzioni

---

title: 🤔 Proprietà

- Permettono un accesso controllato allo stato

code: py

    class Ball:

        @property  # a getter for the pos property
        def pos(self) -> (int, int):
            return self._x, self._y

        # @pos.setter  # if you also really need a setter
        # def pos(self, val: (int, int)):
        #     self._x, self._y = val

code: py

    ball = Ball(40, 80)
    print('ball @', ball.pos)
    # ball.pos = (60, 20)   # with the setter, you could change the pos

---

title: Esercizi
class: segue dark

---

title: 2.1 Area di un'ellisse
figure: images/misc/ellipse.svg

- Definire una *funzione* `ellipse_area` che:
    - Riceve come *parametri* i semiassi di una ellisse: `a`, `b`
    - Restituisce come risultato l'area dell'ellisse: `π⋅a⋅b`
- Definire una *funzione* `main` che:
    - Chiede all'utente due valori
    - Invoca la funzione `ellipse_area` con questi parametri
    - Stampa il risultato ottenuto

>

<http://www.ce.unipr.it/brython/?x21_fun_ellipse.py>

---

title: 2.2 Griglia di colori
figure: images/misc/color-grid.png images/oop/raster-tile.png

- Chiedere all'utente dei valori per `rows` e `cols`
- Mostrare una griglia di rettangoli di dimensione `rows×cols`
- Partire da un rettangolo nero in alto a sinistra
- In orizzontale, aumentare gradatamente la componente di blu
- In verticale, aumentare gradatamente la componente di verde

>

Cominciare a creare una griglia di riquadri tutti neri, con due cicli annidati

Lasciare tra i riquadri un piccolo margine

---

title: 2.3 Movimento orizzontale
figure: images/misc/frogger.png

- Mostrare una pallina che si muove in orizzontale
    - Variabile `dx` indica lo spostamento da effettuare ad ogni ciclo
- La pallina riappare dal bordo opposto, dopo un po' di tempo
    - Permettere alla `x` della pallina di superare i bordi laterali
    - Fissare dei margini esterni di *100px" (p.es.) rispetto ai bordi dell'arena
    - Se però la `x` raggiunge uno dei margini esterni, viene riportata al margine opposto
- Alla pressione del tasto `Enter`, la pallina inverte la direzione

---

title: 2.4 Movimento per 5 fotogrammi
figure: images/misc/frogger.png

- Riprendere l'esercizio 2.3
- La pallina si muove solo dopo la pressione del tasto `Enter`
- Esegue i suoi comportamenti già definiti, ma solo per 5 fotogrammi
- Dopo 5 fotogrammi si ferma, in attesa di una nuova pressione del tasto

>

Incrementare (o decrementare) un contatore ad ogni chiamata a `tick`

---

title: 2.5 Classe per ellisse
figure: images/misc/ellipse.svg

- Classe che modella un'ellisse
- Campi privati (parametri del costruttore)
    - Semiassi: `a, b`
- Metodi pubblici per ottenere...
    - Area: `π⋅a⋅b`
    - Distanza focale: `2⋅√|a^^2^^ - b^^2^^|`
- Nel corpo principale del programma...
    - Creare un oggetto con dati forniti dall'utente
    - Visualizzare area e distanza focale dell'ellisse

---

title: 2.6 Animazione di un veicolo
figure: images/misc/frogger.png

- Creare un veicolo modificando la classe `Ball` vista a lezione
- Eseguire l'animazione
    - Per ogni frame, chiamare il metodo `move` del veicolo
    - Rappresentare un rettangolo nella posizione aggiornata del veicolo
- Modificare però il metodo `move`
    - Il veicolo si sposta sempre di pochi pixel, solo in orizzontale
    - Se supera 100px oltre il bordo destro, ricompare a 100px prima del bordo sinistro e viceversa

---

title: 2.7 Pallina con conteggio
figure: images/misc/frogger.png

- Partire di nuovo dalla classe `Ball` vista a lezione
- La pallina si muove solo dopo la pressione del tasto `Enter`
- Esegue i suoi comportamenti già definiti, ma solo per 5 fotogrammi
- Dopo 5 fotogrammi si ferma, in attesa di una nuova pressione del tasto

---

title: 2.8 Animazione di un alieno
figure: images/misc/science-of-spaceships.jpg

- Partire di nuovo dalla classe `Ball` vista a lezione
- Il movimento di base però è solo orizzontale
- Arrivato al bordo, il personaggio:
    - Si sposta di qualche pixel verso il basso
    - Poi cambia direzione orizzontale
- Fare in modo che, in ogni frame, lo spostamento sia solo orizzontale, o solo verticale, ma *non* diagonale

---

title: 🤔 2.9 Spirale ad oggetti
figure: images/misc/spiral-circles.png

- Mostrare l'*animazione* di un cerchio lungo una spirale
- Realizzare una classe per gestire dati e comportamento del cerchio
- Implementare il movimento in un metodo `move()`
- Campi: `xc`, `yc`, `i`
    - `i` conta i passi; se eccede il limite, torna a 0

---

title: 🤔 Modulo main
class: break

- Nome del modulo in esecuzione: `__name__`
    - É il nome del file, senza estensione
- Il modulo di avvio dell'app ha nome speciale
    - In *CPython*, nome `"__main__"`
    - In *Brython* nome `"script..."`; il “trucco” non funziona

code: py

    # def hypotenuse ...
    def main():
        side1 = float(input("1st side? "))
        side2 = float(input("2nd side? "))
        print("3rd side:", hypotenuse(side1, side2))

    # if this module is imported, main is not executed
    if __name__ == "__main__":
        main()

---

title: 🤔 Ciclo di vita di un oggetto
figure: images/dev/garbage-truck.jpg

- Creazione di un oggetto: allocata memoria per tenere lo stato dell’oggetto
- In Python: variabile = riferimento ad un oggetto
    - *Oggetti*: *allocazione dinamica*, in memoria *heap*
    - *Variabili*: *allocazione automatica*, in memoria *stack*
- Oggetto non più associato a nessuna variabile: necessario liberare memoria
- **Garbage collection**: gestione automatica della restituzione di memoria

---

title: 🤔 Garbage collection

- Vantaggi
    - Non è possibile dimenticare di liberare la memoria (*memory leak*)
    - Non è possibile liberare della memoria che dovrà essere utilizzata in seguito (*dangling pointer*)
- Svantaggi
    - Decide autonomamente quando liberare la memoria
    - Liberare e compattare la memoria richiede del calcolo
- Diversi algoritmi
    - *Reference counting*: idea di base, ma cicli…
    - *Mark & sweep*: parte da riferimenti locali/globali, marca oggetti raggiungibili
    - *Generational garbage collection*: controlla spesso oggetti recenti

---

title: 2.6 Spirale
figure: images/misc/spiral-circles.png

- Mostrare l'*animazione* di un cerchio lungo una spirale
- Ruotare attorno ad un centro fisso `(xc, yc)`
- Amentare dist. `r` dal centro ad ogni passo
- Cancellare lo sfondo ad ogni passo
- Disegnare un cerchio sempre più grande
- Dopo `n` passi, ricominciare daccapo

>

<http://www.ce.unipr.it/brython/?p2_fun_spiral.py>


