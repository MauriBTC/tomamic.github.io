title: Algoritmi in Python 3
subtitle: Introduzione alla programmazione
figure: images/algo/rubik-cube.png

---

title: Python is fun!
figure: images/algo/python-cases.jpg
figcaption: Web, data science, machine learning, scripting, teaching, games, hardware, multiplatform...
class: large-figure

![](images/algo/antigravity.png)

>

<https://xkcd.com/353/>

---

title: Shell interattiva

- Python si presenta con una interfaccia *REPL*
    - Read-Eval-Print Loop
- Un **tipo di dato** specifica un insieme di *valori* e le *operazioni* ammesse
    - `int, float, bool, str`
    - Operazioni aritmetiche e logiche, confronti

code: py

    >>> 3 + 4
    7
    >>> 3 / 4
    0.75
    >>> 4 == 5  # Do not confuse with assignment!
    False
    >>> 2 < 3 or not True
    True

---

title: Valori numerici e booleani

- **`int`** o **`float`**, per numeri interi o reali
    - Operazioni di base: `+, -, *, /`
    - Divisione intera, resto, potenza: `//, %, **`
    - Confronti: `<, <=, >, >=, ==, !=`
-  **`bool`**, per valori booleani: `True, False`
    - Operazioni consentite: `and, or, not`
    - I confronti danno un risultato booleano

code: py

    >>> -7 // 3    # floor division: ‚åä-7/3‚åã
    -3
    >>> -7 % 3     # reminder is always positive
    2
    >>> 2 ** 1000  # no limits (but memory)
    107150[...]069376

---

title: Assegnamento
figure: images/algo/assign.png
class: large-figure

- Una **variabile** serve per ricordare un risultato
- Assegnamento, operatore `=`
    - Alla sinistra una variabile
    - Alla destra un valore
- *Non confondere* con confronto di uguaglianza `==`

code: py

    >>> pi = 3.14  # Assignment
    >>> radius = 2.2
    >>> area = pi * (radius ** 2)
    >>> area
    15.1976
    >>> radius = radius + 1  # guess radius... and area!

---

title: Variabile
figure: images/algo/var-label.svg

- **Nome** (etichetta) associato ad un certo **valore** (oggetto)
    - Oggetto assegnato a pi√π variabili: non viene copiato, ma riceve pi√π etichette
    - Il **tipo** dipende dal valore attualmente assegnato
    - Una var. non dev'essere *dichiarata*, ma dev'essere *inizializzata*

code: py

    >>> x = 100
    >>> DELTA_X = 5        # Constants: UPPER_CASE
    >>> x = x + DELTA_X    # Variables: lower_case
    >>> next_position = x  # Use explicative names!

---

title: Stringhe di testo

- **`str`** per sequenze di caratteri *Unicode*
    - Racchiuse tra apici doppi, o singoli
    - Primi 128 codici *Unicode* == *ASCII*
- Sequenze con `\` (*backslash*) per *caratteri speciali*
    - A capo: `'\n'`
    - Apici singoli o doppi: `'\''`, `'\"'`
    - Altri caratteri speciali: `'\\'`, `'\t'`, `'\a'`, ...

code: py

    >>> str1 = "Monty Python's "
    >>> str2 = 'Flying Circus'
    >>> result = str1 + str2
    >>> result
    "Monty Python's Flying Circus"

---

title: ‚è© Tabella ASCII
class: large-image

![](images/repr/ascii.png)

---

title: Confronto tra stringhe

- Confronto tra stringhe, in ordine *lessicografico*
    - `<, <=, >, >=, ==, !=`
    - Prima le cifre, poi le maiuscole, infine le minuscole

code: py

    >>> 'first' < 'second'
    True
    >>> 'Second' <  'first'
    True
    >>> chr(90)
    'Z'
    >>> ord('Z')
    90

---

title: Leggere e scrivere
figure: images/algo/holy-grail.jpg
class: large-figure

- **`input`** legge una riga di *testo*, inserita dall'utente, in una *variabile*
    - Prima mostra un messaggio
- **`print`** scrive una serie di valori su una riga
    - Tra i valori (parametri) viene inserito uno spazio

code: py

    >>> quester = input("What is your name? ")
    What is your name? Lancelot
    >>> print("Right. Off you go,", quester, ".")
    Right. Off you go, Lancelot .

>

<https://www.youtube.com/watch?v=Xel0c6mpqPA>

---

title: Somma di tre numeri
figure: images/algo/sum3.svg

code: py

    # File sum3.py - to run: python3 sum3.py

    a = float(input("Insert 1st val: "))
    b = float(input("Insert 2nd val: "))
    c = float(input("Insert 3rd val: "))

    total = a + b + c

    print("The sum is", total)

>

<http://www.ce.unipr.it/brython/?p1_sum3.py>

---

title: Disegno su canvas
figure: images/oop/raster-coord.png
class: large-figure

- Useremo un modulo *ad-hoc*: `g2d`
    - Definisce funzioni di disegno
    - Coordinate *raster*: origine in alto a sinistra
- Nel *playground*, versione integrata con *Brython*
    - <http://www.ce.unipr.it/brython>
- **Documentazione**:
    - <https://github.com/tomamic/fondinfo#g2d>

>

Per l'esecuzione locale, copiare nella cartella di lavoro il file `g2d.py`, da `examples`

<https://github.com/tomamic/fondinfo/archive/master.zip>

---

title: Tupla
figure: images/repr/additive-color.svg

- Sequenza **immutabile** di valori, anche di *tipo diverso*
- Spesso tra parentesi, per separarla da altri valori
- Utili anche per grafica:
    - *Color*: `(red, green, blue)` <br> Ogni componente nel range `0..255`<br>
    - *Point*: `(x, y)`<br>
    - *Size*: `(width, height)`<br>
    - *Rect*: `(left, top, width, height)`

code: py

    center_pt = (150, 100)
    bluette_color = (47, 102, 207)  # ~ blue
    window_size = (640, 480)
    some_rectangle = (150, 100, 200, 200)  # square

---

title: Rettangoli e cerchi
figure: images/oop/raster-coord.png

code: py

    import g2d

    g2d.init_canvas((600, 400))  # width, height

    # red + green = yellow
    g2d.set_color((255, 255, 0))         # color
    g2d.fill_rect((150, 100, 250, 200))  # rect

    g2d.set_color((0, 0, 255))
    g2d.fill_circle((400, 300), 20)      # center, radius

    g2d.main_loop()  # manage the window/canvas

---

title: Linee e testi
figure: images/oop/raster-coord.png

code: py

    import g2d

    g2d.init_canvas((600, 400))

    g2d.set_color((0, 255, 0))
    g2d.draw_line((150, 100), (400, 300))   # pt1, pt2

    g2d.set_color((255, 0, 0))
    g2d.draw_text("Hello", (150, 100), 40)  # text, left-top, font-size

    g2d.main_loop()

>

<http://www.ce.unipr.it/brython/?p1_draw.py>

---

title: Strutture di controllo
class: segue dark

---

title: Selezione: if
figure: images/algo/if.svg

- Corpo di `if` o `else`: **indentazione**
    - Richiesta per *sintassi*, non opzionale
    - Pu√≤ contenere qualsiasi istruzione
    - Anche altri blocchi `if` o `while` annidati!

> Readability counts *(The Zen of Python)*

code: py

    radius = int(g2d.prompt("Radius? [50-99]"))

    if 50 <= radius and radius <= 99:
        g2d.set_color((0, 0, 255))
        g2d.fill_circle((200, 200), radius)

    g2d.set_color((255, 255, 0))
    g2d.fill_circle((200, 200), 25)

---

title: Selezione: else
figure: images/algo/if-else.svg

- Clausola `else`: opzionale
    - Eseguita sse la condizione non √® verificata

code: py

    radius = int(g2d.prompt("Radius? [50-99]"))

    if 50 <= radius and radius <= 99:
        g2d.set_color((0, 0, 255))
        g2d.fill_circle((200, 200), radius)
    else:
        g2d.alert("Out of range!")

    g2d.set_color((255, 255, 0))
    g2d.fill_circle((200, 200), 25)

>

<http://www.ce.unipr.it/brython/?p1_if_else.py>

---

title: Confronto tra parole
figure: images/algo/words.svg

code: py

    a = input("First word? ")
    b = input("Second word? ")

    if a < b:
        print("The words are ordered")
    elif a > b:
        print("The words are inverted")
    else:
        print("The words are equal")

- **`elif`**: clausola `else` che contiene un altro `if`
- No `switch`, no `do-while`

> There should be one -- and preferably only one -- obvious way to do it *(ZoP)*

---

title: ‚è© Operazioni aritmetiche
figure: images/algo/calc.svg

code: py

    a = float(input())
    b = float(input())
    op = input()

    if op == '+':
        print(a + b)
    elif op == '-':
        print(a - b)
    elif op == '*':
        print(a * b)
    elif op == '/' and b != 0:
        print(a / b)
    else:
        print("Operation not allowed")

---

title: Iterazione: while
figure: images/algo/count.svg

- Condizione di *permanenza* nel ciclo
- Controllo *preliminare*: possibile che il corpo non sia mai eseguito
- *Problem solving*: sommare tutti i numeri da 1 ad `n`
    - Devo almeno saper contare fino ad `n`

code: py

    n = int(input("n?"))
    count = 1

    while count <= n:
        print(count)
        count = count + 1

---

title: Somma di numeri consecutivi
figure: images/algo/sum1n.svg

- Occorre tenere traccia del *totale parziale*

code: py

    # Sum of the numbers from 1 to n
    n = int(input("n? "))
    total = 0
    count = 1

    while count <= n:
        total = total + count
        count = count + 1

    print("The sum is", total)

>

<http://it.wikipedia.org/wiki/Gauss#Biografia>

---

title: Media di N campioni
figure: images/algo/average.svg

code: py

    n = int(input("How many values? "))
    total = 0
    count = 0

    while count < n:
        val = int(input("Val? "))
        total += val  # total = total + val
        count += 1    # count = count + 1

    if count != 0:
        print("The average is", total / count)

---

title: Ciclo con sentinella
figure: images/algo/sentinel.svg

code: py

    total = 0
    count = 0
    val = int(input("Val? (-1 to finish) "))

    while val != -1:
        total += val
        count += 1
        val = int(input("Val? (-1 to finish) "))

    if count != 0:
        print("The average is", total / count)

---

title: ü§î Quadrato perfetto
figure: images/algo/perfect-square.svg

code: py

    n = int(input("n? "))

    i = 1
    while i * i < n:
        i += 1

    if i * i == n:
        print(i)
    else:
        print("No")

---

title: Intervalli di valori: range
figure: images/algo/sum10.svg

- **`range`**: intervallo di valori aperto a destra
    - Estremi: inferiore *incluso*, superiore *escluso*
    - Iterabile con un ciclo `for`

code: py

    # Add up numbers from 1 to 10

    total = 0
    for i in range(1, 11):
        total += i

    # total = 0
    # i = 1
    # while i < 11:
    #     total = total + i
    #     i = i + 1

---

title: Sequenza di quadrati
figure: images/misc/red-squares.png

code: py

    import g2d

    g2d.init_canvas((300, 300))

    for i in range(5):  ## range(0, 5)
        x = i * 40
        y = x
        red = i * 60
        g2d.set_color((red, 0, 0))
        g2d.fill_rect((x, y, 140, 140))

    g2d.main_loop()

>

<http://www.ce.unipr.it/brython/?p1_red_squares.py>

---

title: Moduli

- *Python Standard Library*: <http://docs.python.org/3/library/>

code: py

    import math
    y = math.sin(math.pi / 4)
    print(y)  # ‚àö2 / 2

code: py

    from math import sin, pi
    print(sin(pi / 4))

code: py

    from random import randint
    die1 = randint(1, 6)  # like rolling a die
    die2 = randint(1, 6)  # like rolling a die
    print(die1, die2)

>

Tutti gli `import` all'inizio dello script, per evidenziare le dipendenze

---

title: Esercizi
class: segue dark

---

title: 1.1 Cerchio
figure: images/misc/greek-pi.png

- Chiedere all'utente il valore del raggio `r` di un cerchio
    - `r` reale compreso tra 0 e 200
- Se `r` √® valido
    - Visualizzare il cerchio
    - Mostrare il valore dell'area e della circonferenza
- Se invece `r` √® fuori range
    - Mostrare un messaggio d'errore

---

title: 1.2 Minore e maggiore
figure: images/misc/three-brothers.png

- Generare e stampare tre numeri interi casuali: `a`, `b`, `c`
- Ciascuno compreso tra 1 e 6
- Determinare e mostrare qual √® il minore dei tre

>

Controllare prima di tutto se `a` √® minore degli altri due <br>
Altrimenti controllare se `b` √® minore di `c` <br>
Altrimenti ...

---

title: 1.3 Calcolo dell'et√†

- Chidere all'utente
    - Anno, mese e giorno della data di nascita
    - Anno, mese e giorno corrente
- Comunicare l'et√† esatta
    - Numero di compleanni gi√† compiuti

>

Nell'anno corrente, l'utente ha gi√† avuto il compleanno?

Espressione booleana composta con `and`, `or`, `not`...

---

title: 1.4 Quadrati casuali
figure: images/misc/random-squares.png

- Chiedere all'utente un numero `n`
- Disegnare `n` quadrati
    - Tutti con lato di 100 pixel
    - Ciascuno in posizione casuale
    - Ciascuno con un colore casuale

>

Cominciare a disegnare un solo quadrato grigio, in posizione casuale

---

title: 1.5 Cerchi concentrici
figure: images/misc/red-circles.png

- Chiedere all'utente il numero di cerchi da disegnare
- Disegnare i cerchi con raggio gradualmente decrescente, ma tutti con lo stesso centro
- Far variare il colore dei cerchi
      - Dal rosso del livello pi√π esterno
      - Fino al nero del livello pi√π interno
- Prima del ciclo, determinare di quanto cambiare raggio e colore ad ogni passo

>

Per iniziare, inserire l'operazione di disegno un ciclo, togliendo ad ogni passo `10` (p.es.) al raggio e al livello di rosso

---

title: 1.6 Numero segreto
figure: images/misc/bingo-balls.png

- Generare all'inizio del programma un numero ‚Äúsegreto‚Äù a caso tra 1 e 90
- Chiedere ripetutamente all'utente di immettere un numero, finch√© non indovina quello generato
- Ad ogni tentativo, dire se il numero immesso √® maggiore o minore del numero segreto

---

title: ü§î 1.7 Resistenze, ciclo
figure: images/misc/resistors.png

- Leggere, attraverso un ciclo, una sequenza di valori di resistenze elettriche
- La sequenza termina quando l'utente immette il valore 0
- Alla fine, visualizzare la resistenza equivalente, sia nel caso di resistenze disposte in serie, che in parallelo

>

Formule utili:

R~~s~~ = ‚àë R~~i~~

1/R~~p~~ = ‚àë (1/R~~i~~)

---

title: ü§î 1.8 Orologio classico
figure: images/misc/classical-watch.jpg

- Disegnare 12 tacche a raggiera, come in un orologio classico
- Miglioramento: disegnare anche le tacche dei minuti, pi√π piccole

>

Usare `math.sin` e `math.cos` per determinare le posizioni in cui disegnare

---

title: ü§î 1.9 La stanza del mostro
figure: images/misc/monster.png

- Il giocatore si muove su una scacchiera di 5x5 celle, partendo da un angolo
    - Le righe e le colonne sono numerate da 0 a 4
- Un tesoro ed un mostro sono nascosti in due posizioni casuali, all'inizio del gioco
- Ad ogni turno, il giocatore:
    - Sceglie una direzione verso cui spostarsi (alto, basso, sinistra, destra)
    - Se capita sulla cella del tesoro, ha vinto
    - Se capita sulla cella del mostro, ha perso

>

Basta memorizzare tre coppie di coordinate cartesiane

Non √® richiesto di utilizzare la grafica
