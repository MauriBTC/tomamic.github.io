title: Esercizi 2019
subtitle: Introduzione alla programmazione
figure: images/dev/geek-girl.jpg

---

title: Esercitazione 1 (09-23)
class: segue dark

---

title: 1.1 Hello, user!
figure: images/misc/handshake.png

- Compilare ed eseguire il programma “`Hello world`”
- In una versione successiva del programma...
- Chiedere il nome all'utente e aggiungere tale nome al messaggio di saluto
- Se il nome dell'utente è “`admin`”, mostrare inoltre il messaggio speciale “`At your command`”

---

title: 1.2 Sfera
figure: images/misc/solids.jpg
class: large-figure

- Chiedere all'utente il raggio di una sfera e la sua densità (in Kg/m^^3^^)
- Calcolare e visualizzare la superficie, il volume e il peso della sfera

>

Definire le variabili necessarie (nomi in minuscolo)

Nel modulo `math` è definita la costante `pi`

---

title: 1.3 Anni bisestili

- Chiedere all'utente di inserire un anno
- Dire se è bisestile oppure no
- Ripetere tutto ciclicamente, finchè l'utente non inserisce il valore `0`

>

Un anno è bisestile se il suo numero è divisibile per 4, con l'eccezione degli anni secolari (quelli divisibili per 100) che non sono divisibili per 400

---

title: 1.4 Rettangoli con ombra
figure: images/misc/shadows.png

- Chiedere all'utente un numero `n`
- Disegnare `n` rettangoli
    - Ciascuno con posizione, dimensione e colore casuale
    - Ciascuno con un ombra grigia spostata a destra ed in basso di 5 pixel

>

Fare in modo che i rettangoli e le ombre siano tutti all'interno nel canvas

---

title: 1.5 Sequenza di quadrati
figure: images/misc/green-squares.png

- Chiedere all'utente un numero `n`
- Su un canvas 500x500, disegnare `n` quadrati
    - Quadrati con lato decrescente
    - Tutti allineati in alto e a sinistra
- Far variare il colore dei quadrati
    - Dal nero del quadrato più grande
    - Fino al verde del quadrato più piccolo

>

Determinare automaticamente le variazioni migliori per lato e colore, prima di iniziare il ciclo

---

title: 1.6 Carattere Unicode
figure: images/misc/characters.png

- Chiedere all'utente un numero
- Visualizzare il simbolo Unicode corrispondente
- Ripetere le operazioni in un ciclo, finchè l'utente non inserisce il valore `0`

>

Usare la funzione `chr` per convertire un codice nel simbolo corrispondente

---

title: 1.7 Tabella ASCII

- Visualizzare la tabella dei codici ASCII
- Un carattere per ogni riga
    - All'inizio della riga: il carattere
    - Di fianco: il codice ASCII
- Limitare l'intervallo tra 32 a 126 (due costanti)

>

Non c'è input dell'utente

---

title: 1.8 Media dei dispari
figure: images/misc/data-sequence.png

- Leggere, attraverso un ciclo, una sequenza di numeri naturali
- La sequenza termina quando l'utente inserisce un valore negativo
- Calcolare il valore medio, considerando solo i valori dispari tra quelli inseriti

---

title: 1.9 Passeggiata casuale

- Chidere all'utente un numero `n`
- A partire dalla posizione `x = 0, y = 0`
- Compiere `n` passi, ciascuno in una direzione casuale
    - Estrarre un numero casuale `r` tra 0 e 3
    - Se `r == 0`, sottrarre 1 alla `y` attuale (alto)
    - Se `r == 1`, sommare 1 alla `x` attuale (destra)
    - Se `r == 2`, sommare 1 alla `y` attuale (basso)
    - Se `r == 3`, sottrarre 1 alla `x` attuale (sinistra)
- Al termine comunicare le coordinate finali e la distanza raggiunta dall'origine, calcolata come `abs(x) + abs(y)`

---

title: Esercitazione 2 (09-30)
class: segue dark

---

title: 2.1 Funzione, Fahrenheit
figure: images/misc/thermometer.png

- Definire una funzione `cels_to_fahr`
    - Parametro: temperatura in gradi Celsius, in `float`
    - Risultato: temperatura in gradi Fahrenheit, in `float`
- Invocare la funzione dalla shell interattiva
- Definire poi una funzione `main`
    - *Procedura, senza parametri e senza risultato*
    - Chiedere all'utente la temperatura in gradi Celsius
    - Poi chiamare `cels_to_fahr` con questo parametro
    - Infine mostrare all'utente il risultato

>

Partire dalla formula `fahr = cels * 1.8 + 32`

---

title: 2.2 Box

- Classe che modella un riquadro
    - Due campi privati, per largezza ed altezza: `_width`, `_heigth`
    - Due metodi, per ottenere area e perimetro: `area`, `perimeter`
- Nel corpo principale del programma, creare e usare un riquadro
    - Chiedere all'utente le dimensioni del riquadro
    - Passare queste dimensioni al costruttore, come parametri
    - Mostrare area e perimetro del riquadro creato

---

title: 2.3 Triangolo di cifre

- Leggere un numero intero positivo `n` (< 10)
- Per ciascun valore `y` tra 1 ed `n`...
- Stampare una riga con le cifre da 1 ad `y`

code: Output

    1
    12
    123
    1234

>

Usare due cicli for annidati <br>
All'inizio non considerare `n`, ma fissare `y` e scrivere una sola riga: `y = 3` → `“123”` <br>
Poi racchiudere tutto in un ciclo for esterno

---

title: 2.4 Triangolo di cerchi colorati
figure: images/misc/xmas-triangle.png

- Chiedere all'utente un numero `n`
- Disegnare `n` righe di cerchi, allineate a sinistra
- Il numero di riga corrisponde al numero di cerchi da disegnare
- Ogni cerchio ha un colore casuale

---

title: 2.5 Animazione pallina
figure: images/oop/anim-rotate.png

- Partire dall'esempio dell'animazione orizzontale, senza classi
    - Quando la pallina arriva ad uno dei 4 bordi...
    - Cambia direzione di 90°, in senso orario
    - Es. Arrivata al bordo destro, vira verso il basso
- Mostrare l'animazione di una pallina su un canvas

---

title: 2.6 Pallina con svolta
figure: images/oop/anim-rotate.png

- Creare una classe `TurningBall`
    - A partire dalla classe `Ball` vista a lezione
- Modificare il metodo `move`
    - Quando la pallina arriva ad uno dei 4 bordi...
    - Vira la direzione di 90°, in senso orario
    - Es. Arrivata al bordo destro, vira verso il basso

---

title: 2.7 Rimbalzi con gravità
figure: images/misc/bouncing-ball.jpg

- Creare una classe `FallingBall`
    - A partire dalla classe `Ball` vista a lezione
- Nel metodo `move`, aggiungere l'effetto della gravità
    - Accelerazione: aggiungere un piccolo valore *costante* alla velocità verticale
    - `g = 0.4`
    - `dy += g`
    - Quando si tocca il fondo, cambiare il segno di `dy`
- Mostrare l'animazione di una pallina, con l'effetto della gravità

---

title: 2.8 Palline colorate

- Aggiungere ai dati della pallina (es. 2.7) anche un colore
    - Generare una tupla `RGB` casuale, nell'inizializzatore
- Aggiungere un corrispondente metodo *getter* denominato `color`
    - Per ottenere dall'esterno il colore della pallina
    - Restituire il colore come una tupla (tripla RGB)
- Creare due palline e mostrarne graficamente il movimento
    - Per ogni frame, chiamare il metodo `move` di ogni pallina
    - Rappresentare un rettangolo o un cerchio colorato nella posizione aggiornata di ogni pallina

---

title: 2.9 Albero di cerchi colorati
figure: images/misc/xmas-tree.png

- Chiedere all'utente un numero `n`
- Generare `n` righe di cerchi, allineate al centro
- Il numero di riga corrisponde al numero di cerchi da disegnare
- Ogni cerchio ha un colore casuale
- Aggiungere in fondo una riga con un solo cerchio

