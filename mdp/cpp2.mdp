title: Linguaggio C++11
subtitle: Classi e oggetti
figure: images/misc/cpp-logo.jpg

---

title: Classi e oggetti

- Una classe √® un tipo che ha *variabili membro* e *funzioni membro*
- Il valore di una variabile di un tipo classe √® detto *oggetto*
- Un programma √® un insieme di oggetti che interagiscono

---

title: Incapsulamento

- Una classe √® un tipo completo
- Un **tipo di dato** consiste di
    - Un insieme di *valori*
    - Un insieme di *operazioni*
- Tipo di dato **astratto** (ADT)
	- L‚Äôutilizzo √® *indipendente dall‚Äôimplementazione*
	- I tipi di dati predefiniti sono ADT
	- Le classi devono essere ADT

---

title: Membri privati e pubblici

- Membri *privati*
	- Possono essere referenziati solo all‚Äôinterno delle definizioni delle funzioni membro
	- Buona norma rendere private tutte le variabili membro
- Membri *pubblici*
	- Possono essere referenziati ovunque
	- Buona norma rendere pubbliche le sole funzioni membro necessarie
	- Quelle che espongono le funzionalit√† della classe

---

title: Sezioni pubblica e privata

- Generalmente si definisce una sola sezione pubblica e una sola sezione privata
- Generalmente la sezione pubblica compare prima
	- Maggior chiarezza verso chi legge il codice
- In assenza di specificazione, C++ considera i membri privati
	- Indicativo della necessit√† di nascondere il maggior numero possibile di dettagli

---

title: Classi: utilizzo pratico

- Una volta definita, la classe pu√≤ essere usata per dichiarare oggetti, array, puntatori e riferimenti

code: C++

    Time sunset;
    Time arrayOfTimes[5];
    Time *pointerToTime;
    Time &dinnerTime = sunset;

---

title: Funzioni accessor e mutator

- Funzioni che forniscono un accesso controllato ai dati
	- Le funzioni *accessor* consentono di leggere i dati dell‚Äôoggetto
	- Le funzioni *mutator* consentono di modificare i dati dell‚Äôoggetto
	- Generalmente si definiscono funzioni *setter/getter*
- Buona norma mantenere private le variabili membro
	- Dotarle di funzioni accessor e mutator solo se necessario
- *Validation*
	- Una funzione che setta il valore di un dato dovrebbe anche controllarne la validit√†
	- Dovrebbe comunque lasciare il dato in uno stato consistente (oppure lanciare un‚Äôeccezione...)

---

title: Interfaccia ed implementazione

- L‚Äô*interfaccia* di una classe consiste di
    - Dichiarazioni delle funzioni membro pubbliche
    - Commenti
- L‚Äô*implementazione* di una classe consiste di
    - Dichiarazioni di variabili e funzioni membro private
    - Definizioni delle funzioni membro
- Possono stare in file diversi, ma √® importante la separazione concettuale
    - Interfaccia definita in *file header* (`.h` o `.hpp`)
    - Incluso da tutti i file che usano la classe (direttiva `#include`)
- Chi vende librerie sw fornisce solo file header e codice oggetto

---

title: Programmazione orientata agli oggetti

- Un programmatore deve poter usare la classe conoscendo solo l‚Äô*interfaccia*
- Vantaggio: √® possibile cambiare l‚Äôimplementazione
	- Senza cambiare altro codice che usa la classe
- Filosofia: descrivere il problema in termini di *oggetti che interagiscono*
	- Piuttosto che algoritmi che operano su dati
	- Anche algoritmi e dati possono cambiare

---

title: Classe di esempio: interfaccia

code: C++

    // prevent multiple inclusions of header file
    #ifndef TIME1_H
    #define TIME1_H
    // Time abstract data type definition
    class Time {
    public:
        Time(); // constructor
        void setTime( int, int, int ); // set hour, minute, second
        void printMilitary(); // print military time format
        void printStandard(); // print standard time format
    private:
        int hour; // 0 - 23
        int minute; // 0 - 59
        int second; // 0 - 59
    };
    #endif

---

title: Classe di esempio: implementazione

code: C++

    #include "time1.h"
    Time::Time() { hour = minute = second = 0; }
    void Time::setTime( int h, int m, int s ) {
        hour = (h >= 0 && h < 24) ? h : 0;
        minute = (m >= 0 && m < 60) ? m : 0;
        second = (s >= 0 && s < 60) ? s : 0;
    }
    void Time::printMilitary() {
        cout << (hour < 10 ? "0" : "") << hour << ":"
             << (minute < 10 ? "0" : "") << minute;
    }
    void Time::printStandard() {
        cout << ((hour == 0 || hour == 12) ? 12 : hour % 12) << ":"
             << (minute < 10 ? "0" : "") << minute << ":"
             << (second < 10 ? "0" : "") << second
             << (hour < 12 ? " AM" : " PM");
    }

---

title: Classe di esempio: utilizzo

code: C++

    #include "time1.h"
    int main() {
        Time t1;
        t1.setTime(17, 15, 0);
        t1.printStandard();
        Time *t2 = new Time();
        t2->setTime(17, 20, 0); // (*t2).setTime(17, 20, 0);
        t2->printStandard(); // (*t2).printStandard();
        delete t2;
    }

---

title: Costruttore

- Funzione membro speciale, per *inizializzazione*
    - In sezione pubblica, ha stesso nome della classe
- Chiamata *automaticamente* quando dichiarato un oggetto
    - Non pu√≤ essere invocato come altre f. membro
    - Non pu√≤ restituire un valore
- Alternativa preferibile: *lista di inizializzazione* (vedi)
- Spesso si ha *overloading* dei costruttori

---

title: Costruttore senza argomenti

- Quando si vuole invocare il **costruttore senza argomenti**, non si usano le parentesi
    - Esempio: `DayOfYear date;`
    - Altrimenti, il compilatore intende una *dichiarazione di funzione*
- *Uniform initialization*, C++11: chiamata al costruttore con parentesi *graffe*
- In assenza di costruttore, creato un **costruttore di default** senza aromenti
    - Se definito almeno un costruttore, non creato il costruttore di default
- Meglio includere un costruttore senza parametri, se possibile

---

title: Chiamata esplicita del costruttore ü§î

- Il costruttore pu√≤ essere chiamato esplicitamente per modificare le variabili membro di un oggetto
- Crea un oggetto anonimo e lo inizializza con i valori degli argomenti
- L‚Äôoggetto anonimo pu√≤ essere assegnato a una variabile del tipo classe
    - Ex.: `DayOfYear date(4, 5);`
    - `date = DayOfYear(10, 14);`
    - Pu√≤ essere pi√π efficiente usare le mutator functions
- Se sono disponibili funzioni *mutator*
	- Chiamarle anche dal costruttore, per non ripetere codice

---

title: Lista di inizializzazione

- Variabili membro: create e inizializzate nell‚Äôordine in cui sono definite
- Lista di inizializzazione: pi√π efficiente per variabili membro di tipo classe
- Le variabili membro *possono* essere inizializzate all‚Äôinterno di una lista di inizializzazione
- Costanti, riferimenti e oggetti inizializzati in lista di inizial., oppure alla dichicarazione

---

title: Lista di inizializzazione (2)

code: C++

    class Increment {
    public:
        Increment(int c = 0, int d = 1);
        void addDelta() { count += delta; }
        void print() const;
    private:
        int count;
        const int delta; // const data member
    };
    // Constructor for class Increment
    Increment::Increment(int c, int d)
        : delta( d ) // initializer for const member
    {
        count = c;
    }

---

title: Membri di tipo classe

- **Composizione**
	- Una classe pu√≤ avere una variabile membro di tipo classe
- *Lista di inizializzazione*
	- Notazione speciale per invocare il costruttore della variabile membro nel costruttore della classe pi√π esterna
	- I parametri del costruttore della classe pi√π esterna possono essere usati nella chiamata del costruttore della variabile membro

---

title: Distruttore

- Funzione membro speciale, chiamata *automaticamente* quando oggetto distrutto
    - Non riceve parametri e non restituisce valori
    - Una classe pu√≤ avere al massimo un unico distruttore
    - *Naming*: `~` + nomeClasse
- Il distruttore *non distrugge* l‚Äôoggetto
    - Ma svolge operazioni utili prima che oggetto distrutto
    - Es.: *rilascio della memoria* allocata dinamicamente
- Se distruzioni a catena per oggetti annidati...
    - Distruttori chiamati in *ordine inverso* rispetto ai costruttori

---

title: Modificatore const: 1¬∞ uso

- Per un parametro di tipo classe
    - Passaggio *call-by-reference* pi√π efficiente di *call-by-value*
- Parametri di tipo classe: preferibile *call-by-reference*
- Se la funzione *non modifica* il parametro si usa il modificatore `const`

---

title: Modificatore const: 2¬∞ uso

- Altro uso di `const`
    - Funzione membro che *non modifica l‚Äôoggetto* chiamante
    - Va messo sia nella dichiarazione che nella definizione
- *Attenzione*: `const` richiede consistenza!

---

title: Reference come valore di ritorno

- E‚Äô possibile per una funzione membro pubblica restituire una reference a membri privati della classe
- Per quanto sintatticamente corretta, questa operazione pu√≤ violare il principio di information hiding

---

title: Reference come valore di ritorno (2)

code: C++

    #ifndef TIME4_H
    #define TIME4_H
    class Time {
    public:
        Time( int = 0, int = 0, int = 0 );
        void setTime( int, int, int );
        int getHour();
        int &badSetHour( int ); // DANGEROUS reference return
    private:
        int hour;
        int minute;
        int second;
    };
    #endif

---

title: Funzioni inline

- Definizione di funzione membro pu√≤ essere posta *inline*
    - All‚Äôinterno della definizione della classe
- Il compilatore pu√≤ inserire il codice della funzione in ogni punto di chiamata
    - Svantaggio: mescoliamo interfaccia e implementazione
    - Definire *inline* solo funzioni molto corte

---

title: Membri static: variabili

- Una variabile membro *static* √® condivisa da tutti gli oggetti di una classe
- Usata dagli oggetti della classe per comunicare e coordinarsi
- Solo gli oggetti della classe possono accedervi
- Se *public*, allora accessibile con *scope resolution*
- Va inizializzata al di fuori della definizione della classe, una sola volta

---

title: Membri static: funzioni

- Una funzione membro *static* accede solo ai membri *static*
- Non pu√≤ accedere ai dati dell‚Äôoggetto chiamante
- Viene invocata usando il nome della classe e lo *scope resolution operator* (`::`)
- La parola chiave `static` va messa solo nella dichiarazione

---

title: Overloading di operatori
class: segue dark

---

title: Operatori come funzioni

- Gli operatori (+, -, ==, ‚Ä¶) non sono altro che‚Ä¶
    - *Funzioni* usate con una sintassi particolare
- C++ consente di *sovraccaricare* gli operatori per accettare oggetti
    - Caratteristica tra le pi√π apprezzate del linguaggio
    - Pu√≤ rendere alcuni programmi pi√π chiari
    - Non abusarne quando invece l‚Äôuso non √® chiaro!
- Almeno uno degli operandi deve essere di tipo classe

---

title: Overloading di operatori

- Un operatore si scrive *come una comune funzione*
    - *Nome* dato dalla parola chiave `operator`
    - Seguita dal simbolo dell‚Äôoperatore di cui fare l‚Äô*overloading*
- Unici *operatori predefiniti* su membri di tipo classe:
    - `=` (assegnamento)
    - `&` (indirizzo)
- L‚Äô*overloading* deve essere *sempre esplicito*
    - Es. Overload di `=` non condiziona `+=`, `-=`, o `!=`
    - Es. Se si implementa solo l‚Äôop. `+`, non si pu√≤ usare `+=`

---

title: Operatori come funzioni membro

- Il primo operando √® l‚Äôoggetto chiamante, quindi:
    - Gli operatori binari hanno un solo parametro
    - Gli operatori unari non hanno parametri
- Vantaggi
    - √à pi√π nello spirito *OOP*
    - √à pi√π efficiente
- C‚Äô√® uno svantaggio
    - Il primo operando (l‚Äôoggetto pi√π a sinistra) deve essere membro della classe
    - Non sempre conviene, non sempre √® possibile
    - Es. operatori `>>` e `<<`

---

title: Costruttori e conversione di tipo automatica

- Conversioni automatiche di tipo
    - Se definizione di classe contiene i costruttori appropriati
- Es.: `myAmount + 25`
    - Creato un oggetto di classe `Amount`
    - Al costruttore viene passato `25`
- Operatore binario sovraccaricato *come membro*
    - Conversione automatica del 2¬∞ operando (argomento)
    - Non del 1¬∞ (oggetto chiamante)
- Es.: `25 + myAmount`
    - *Non funziona*, se operatore membro

---

title: Operatori come funzioni non membro

- Possibile *overloading* dichiarando le funzioni
    - Senza che siano membro della classe
- *Svantaggio*: no accesso a campi privati
    - Necessit√† di utilizzare *accessor*
    - La classe √® obbligata a fornire tali *accessor*
    - Overhead nella chiamata degli *accessor*
- Perci√≤, gli *operatori non membro* generalmente sono dichiarati come `friend` (‚Ä¶)

---

title: Funzioni friend

- Funzione `friend` di una classe ha accesso ai membri privati
    - Pur non essendone membro
- Dichiarata `friend` nella definizione della classe
    - Per chiarezza meglio se all‚Äôinizio
    - Viene definita e chiamata come una funzione ordinaria
- Le funzioni `friend` hanno migliori prestazioni
    - Non necessitano di *accessor*

---

title: Funzioni friend

- Le funzioni *friend* pi√π comuni sono gli operatori sovraccaricati
- Una funzione pu√≤ essere *friend* di pi√π classi
- Offrono il vantaggio della conversione automatica di tutti gli operandi
- Ma per alcuni autori non sono nello spirito *OOP*
- Evitarle, se possibile: *violano l‚Äôincapsulamento*

---

title: Funzioni friend: esempio

code: C++

    #include <iostream>
    using std::cout;
    using std::endl;
    class Count {
        friend void setX( Count &, int ); // friend declaration
    public:
        Count() { x = 0; }
        void print() const { cout << x << endl; } // output
    private:
        int x; // data member
    };
    // Can modify private data of Count because
    // setX is declared as a friend function of Count
    void setX( Count &c, int val ) {
        c.x = val; // legal: setX is a friend of Count
    }

---

title: Valore di ritorno const

- Se una funzione *restituisce un oggetto*
    - Uso di `const` per valore restituito impedisce modifiche all‚Äôoggetto
    - Es: `(m1+m2).input();` // compiler error
- Funzioni *accessor* che restituiscono variabili membro di tipo classe
    - Bene usare `const` per il valore restituito
- Restituire valori di *tipi predefiniti* come `const` *non ha senso*

---

title: Operatori << e >>

- Operatori `<<` e `>>` sovraccaricati per *I/O* degli oggetti di una classe
- Notazione di immediata comprensione
- *Non possono essere sovraccaricati come membri*
- Operando pi√π a sinistra √® `ostream&`, oppure `istream&`
- Non √® del tipo della classe per cui sovraccaricare `<<` e `>>`

---

title: Operatori << e >>

- Di fatto le chiamate effettuate sono nella forma:
    - `cin >> object; // operator>>(cin, object);`
    - `cout << object; // operator<<(cout, object);`
- Gli operatori `<<` e `>>` restituiscono rispettivamente un oggetto `ostream` e `istream`
- In questo modo, si possono *concatenare* pi√π chiamate all‚Äôoperatore stesso
    - `cout << object1 << object2;`

---

title: Operatore =

- L‚Äôoperatore `=` (*assegnamento*) deve essere sovraccaricato come membro
- Se non viene sovraccaricato, viene creato automaticamente
- L‚Äôoperatore `=` *di default* copia i valori delle variabili membro...
    - Da un oggetto a un altro oggetto, in variabili membro corrisp.
- *Problemi nel caso ci siano puntatori*: l‚Äôoperatore `=` deve essere sovraccaricato!

---

title: Puntatore this

- Un oggetto ha accesso al proprio indirizzo mediante il puntatore `this`
- `this` non √® parte dell‚Äôoggetto
    - Piuttosto √® passato come *argomento implicito*
    - A tutte le funzioni membro dell‚Äôoggetto
- Tipo del puntatore `this`:
    - Funzione membro non costante: `Employee* const`
    - Funzione membro costante: `const Employee* const`

---

title: Auto-assegnamento

- Se si fornisce un operatore `=`...
- Evitare auto-assegnamenti, o rischio *memory-leak*

code: C++

    // Overloaded = operator; avoids self assignment
    const String &String::operator=(const String &right) {
        cout << "operator= called\n";
        if ( &right != this ) { // avoid self assignment
            delete [] sPtr; // prevents memory leak
            length = right.length; // new String length
            setString( right.sPtr ); // call utility function
        } else {
            cout << "Attempted assignment of a String to itself\n";
        }
        return *this; // enables cascaded assignments
    }

---

title: Memory leak

- Un *memory leak* (falla nella memoria) √® un particolare tipo di **errore**
    - Consumo non voluto di memoria
- Dovuto al *mancato rilascio della memoria* non pi√π utilizzata da parte dei processi
    - Il termine non √® etimologicamente corretto, visto che la memoria non viene persa fisicamente
    - Piuttosto diventa inutilizzabile per un difetto del software

---

title: Operatori ++ e --

- Occorre un modo per distinguere la forma prefissa dalla forma postfissa
- La forma **prefissa** √® sovraccaricata come qualsiasi altro operatore unario
- Nella forma **postfissa** si aggiunge un *parametro fittizio* di tipo `int`
    - Nella dichiarazione e nella definizione
    - Si tratta di un ‚Äú*dummy value*‚Äù senza nessun altro scopo

---

title: Operatori ++ e --

- Risultato per *riferimento* nella forma *prefissa*
- Risultato per *valore* nella forma *postfissa*

code: C++

    // Preincrement operator overloaded as a member function.
    Date &Date::operator++() {
        helpIncrement(); // The increment is in this utility function
        return *this; // reference return to create an lvalue
    }
    // Postincrement operator overloaded as a member function. Note
    // that the dummy int parameter does not have a name.
    Date Date::operator++(int) {
        Date temp = *this;
        helpIncrement(); // The increment is in this utility function
        // return non-incremented, saved, temporary object
        return temp; // value return; not a reference return
    }

---

title: Operatore []

- L‚Äôoperatore `[]` deve essere sovraccaricato come membro
- Se si vuole usare il valore restituito come *l-value*, deve essere una *reference*
- Il parametro **indice** pu√≤ essere di *qualsiasi tipo* ed √® l‚Äôargomento della chiamata alla funzione membro

---

title: Overloading: riassunto

- Almeno un operando deve essere di tipo classe
- **Non si pu√≤**
    - Creare un nuovo operatore
    - Cambiare il numero di operandi di un operatore
    - Cambiare la precedenza di un operatore
    - Dare un argomento di default a un operatore sovraccaricato
- I seguenti operatori possono essere sovraccaricati *solo come membri*
    - `= [] -> ()`

---

title: Overloading: riassunto

- I seguenti operatori possono essere sovraccaricati solo come *non membri* o *friend*
    - `<< >>`
- I seguenti operatori *non possono essere sovraccaricati*
    - `. :: sizeof ?:`
- Per alcuni operatori l‚Äôoverloading √® *sconsigliato*
    - `&&` e `||` quando sovraccaricati effettuano la valutazione completa dell‚Äôespressione
    - `,` quando sovraccaricato non garantisce l‚Äôordine di valutazione da sinistra a destra

---

title: Variabili dinamiche di tipo classe

- Quando si usa l‚Äôoperatore new con un tipo classe viene chiamato il costruttore
    - Es: MyClass *classPtr;
    - classPtr = new MyClass;
    - classPtr = new MyClass(2, 45.3);
        ‚Ä¶
    - delete classPtr;

---

title: Puntatore this

- `this` √® un puntatore predefinito che punta all‚Äôoggetto chiamante
- Non si pu√≤ cambiare il suo valore
- Non pu√≤ essere usato nella definizione di una funzione membro *static*

---

title: Copia di oggetti
class: segue dark

---

title: Operatore = di default

- Copia i valori dell‚Äôoggetto sorgente (*r-value*) nell‚Äôoggetto destinazione (*l-value*)
- *Problemi* se la classe include una variabile *membro puntatore*
- Dopo assegnamento, oggetto sorgente e destinazione hanno puntatori alla stessa area di memoria
- **Memory leak**: forse l'area prima puntata dall‚Äôoggetto destinazione non √® pi√π referenziata:
- **Dangling pointer**: il primo distruttore chiamato, tra i due, distrugge la memoria a cui puntano entrambi

---

title: Shallow e deep copy

- La **shallow copy** (o ‚Äúcopia superficiale‚Äù) di A in B si realizza copiando byte a byte i valori presenti in A. In questo modo viene di fatto copiato il solo oggetto, ma non gli oggetti ‚Äúfigli‚Äù a cui il ‚Äúpadre‚Äù fa riferimento
- La **deep copy** si realizza invece copiando anche tutti gli oggetti ‚Äúfigli‚Äù facenti parte dell‚Äôoggetto ‚Äúpadre‚Äù

>

In *Python*: funzioni `copy` e `deepcopy` in modulo `copy`

---

title: Overloading operatore =

- L‚Äôoperatore `=` predefinito restituisce il suo operando sinistro per *reference* (permettendo cos√¨ assegnamenti in cascata)
- Quando si ridefinisce l‚Äôoperatore `=` per una classe si restituisce l‚Äôoggetto chiamante per reference (usando il puntatore `this`)
- Fare attenzione al caso dell‚Äô*auto-assegnamento*

code: c++

    class A {
    public:
        A& operator=(const A& other) {
            if (this != &other) {  // ... deallocate; copy data from other
            }
            return *this;  // at the end, return *this
        }
    // ...
    };

---

title: Distruttore

- √à una funzione membro che viene *chiamata automaticamente*
    - Quando termina lo **scope** di un oggetto
- Se una classe ha variabili membro *dinamiche* √® bene che il distruttore le de-allochi
- Ha lo stesso *nome* della classe preceduto dal simbolo ‚Äú~‚Äù
    - Non ha parametri e non ha valore di ritorno
    - Non ha argomenti e non pu√≤ essere sovraccaricato
- Quando vengono chiamati pi√π costruttori, i distruttori vengono chiamati in ordine inverso

---

title: Costruttore di copia

- √à un costruttore con un parametro dello stesso tipo della classe (*const call-by-ref*)
    - **const**: deve semplicemente essere costruita una copia)
    - **by reference**: altrimenti si creerebbe un ciclo ricorsivo di chiamate!
- Viene chiamato automaticamente quando
    - Un oggetto viene dichiarato e inizializzato con un altro oggetto dello stesso tipo
    - Una funzione restituisce un valore di tipo classe
    - Un oggetto viene passato per valore a una funzione

---

title: Costruttore di copia di default

- Se non viene definito viene *creato automaticamente*
- Il costruttore di copia di default fa una *shallow copy*
- Se la classe comprende *puntatori* e variabili dinamiche deve essere *ri-definito*

---

title: The big three

- Creati automaticamente dal compilatore
    - **Operatore `=`**
    - **Distruttore**
    - **Costruttore di copia**
- Se la classe usa *puntatori* e variabili dinamiche devono essere *ri-definiti*
    - Non farlo √® un grave *errore logico*
- Di fatto sono legati dalle stesse problematiche relative all‚Äôuso di puntatori

> If you need any of them, you need all three

Esempio: `PFArrayD.cpp` di Savitch, ‚Äúpartially filled array of double‚Äù

---

title: Organizzazione del codice
class: segue dark

---

title: Suddivisione del codice in file

- Separazione tra la classe e i programmi che la usano
    - Riuso: parti separate facilmente riusabili (libreria)
    - Compilazione selettiva
- Separazione tra interfaccia e implementazione
    - Incapsulamento: occultamento dei dettagli
    - Diverse implementazioni di una stessa libreria

---

title: Regole per incapsulamento

- Rendere private tutte le variabili membro
- Raggruppare definizione della classe, dichiarazioni degli operatori e commenti nel file di interfaccia (header file)
- Raggruppare le definizioni delle funzioni membro, degli operatori e delle funzioni ausiliarie e l‚Äôinizializzazione delle variabili static nel file di implementazione

---

title: Compilazione separata

- Il file che contiene il programma che usa la classe si chiama file di applicazione
- Sia l‚Äôimplementazione che l‚Äôapplicazione devono includere l‚Äôheader file
- L‚Äôimplementazione e l‚Äôapplicazione vengono compilate separatamente
- Per ottenere l‚Äôeseguibile occorre linkare i due oggetti

---

title: Compilazione separata (2)

- Sorgenti
    - `dtime.cpp`
    - `timedemo.cpp`
    - `dtime.h`
- Oggetti
    - `g++ -c dtime.cpp`
    - `dtime.o`
    - `timedemo.o`
- Eseguibile
    - `g++ -c timedemo.cpp`
    - `g++ dtime.o timedemo.o ‚Äìo timedemo`
    - `timedemo`

---

title: Comando make

- Capisce quali moduli devono essere ricompilati e invia i comandi opportuni
- Utilizza un file chiamato makefile o Makefile che descrive le dipendenze e contiene i comandi per aggiornare i file
- Verifica il tempo di ultima modifica dei file per decidere quali richiedono aggiornamento

---

title: Makefile: esempio

code: make

    timedemo: timedemo.o dtime.o
    g++ timedemo.o dtime.o -o timedemo
    timedemo.o: timedemo.cpp dtime.h
    g++ -c -W -Wall -pedantic timedemo.cpp
    dtime.o: dtime.cpp dtime.h
    g++ -c -W -Wall -pedantic dtime.cpp

---

title: Vantaggi della compilazione separata

- Separando l‚Äôinterfaccia e l‚Äôimplementazione della classe dall‚Äôapplicazione
    - Posso riusare la classe in diversi programmi senza riscriverla
    - Posso compilare l‚Äôimplementazione solo una volta
- Separando l‚Äôinterfaccia dall‚Äôimplementazione
    - Se cambio l‚Äôimplementazione non devo cambiare i programmi che usano la classe
    - Devo solo ricompilare l‚Äôimplementazione e rifare il link

---

title: Esempio: inclusione ripetuta

code: C++

    // classA.h
    class A {
    public:
        // ...
    private:
        // ...
    };

    implA.cpp

    implB.cpp

    //classB.h
        #include ‚ÄúclassA.h‚Äù
    - class B
        {
    - public:
        ‚Ä¶
    - private:
    - A var;
        };

    - Main.cpp
        #include ‚ÄúclassA.h‚Äù
        #include ‚ÄúclassB.h‚Äù
        ‚Ä¶

---

title: Uso di #ifndef

- Un header file pu√≤ includere altri header file
- Per evitare che il contenuto di un header file venga incluso pi√π volte √® necessario racchiudere il codice tra queste due sezioni:

code: C++

    #ifndef NOMEHEADER_H
    #define NOMEHEADER_H

code: C++

    #endif

- Come identificatore si usa il nome del file in maiuscolo e con l‚Äôunderscore al posto del punto
- Convenzione usata in tutti gli header std (iostream, vector, string,‚Ä¶)

---

title: Esempio: inclusione ripetuta (2)

- classA.h

code: C++

    #ifndef CLASSA_H
    #define CLASSA_H

    class A
    {
        //‚Ä¶
    };
    #endif

- classB.h

code: C++

    #ifndef CLASSB_H
    #define CLASSB_H
    #include ‚ÄúclassA.h‚Äù
    class B
    {
        //‚Ä¶
    };
    #endif

- implA.cpp
- implB.cpp

---

title: Namespace e direttiva using

- Un namespace √® un insieme di definizioni di nomi (classi, funzioni, ‚Ä¶)
- Per creare un namespace

code: C++

    namespace Name_Space_Name
    { /* Some code */ }

- Per rendere disponibili tutti i nomi di un namespace si usa la *direttiva* `using`
- Lo scope della direttiva using va dal punto di occorrenza alla fine del file o del blocco
- Se il codice non √® messo esplicitamente in un namespace √® nel namespace globale (accessibile ovunque)

code: C++

    using namespace Name_Space_Name;

---

title: Dichiarazione using

- Per rendere disponibile un solo nome di un namespace uso la dichiarazione
    - using Name_Space_Name::One_Name;
- Utile con (molte) chiamate a pochi nomi Es: using std::cin; using std::cout; using std::string;

---

title: Differenze tra direttiva e dichiarazione

- La direttiva introduce tutti i nomi del namespace, la dichiarazione introduce un solo nome
- La direttiva introduce i nomi del namespace solo potenzialmente
    - Si possono avere sovrapposizioni potenziali
    - Non si possono avere sovrapposizioni esplicite

---

title: Qualificazione dei nomi

- Se uso una definizione di un nome poche volte, posso qualificare il nome ogni volta che lo uso
    - esempio: std::cin
- Questa forma √® usata spesso per specificare il tipo dei parametri
- Posso qualificare un nome rispetto a un namespace anche entro lo scope di una direttiva using per un altro namespace che definisce lo stesso nome
    - esempio: using namespace MySpace;
    - void someFunction(istream p1, std::istream p2);

---

title: Come specificare il namespace?

- Evitare l‚Äôuso della direttiva using all‚Äôinizio del file perch√© vanifica il meccanismo dei namespace
- La maggior parte delle volte √® preferibile l‚Äôuso della dichiarazione using
- Se il programma usa namespace diversi in punti diversi pu√≤ essere opportuno inserire le direttive o dichiarazioni using in blocchi
- Negli header file usare la qualificazione dei nomi

---

title: Namespace senza nome

- Una unit√† di compilazione √® costituita da un file e dagli header file da esso inclusi
- Ogni unit√† di compilazione ha un namespace senza nome
    - namespace
        { ‚Ä¶ }
- I nomi definiti nel namespace senza nome sono locali all‚Äôunit√† di compilazione

---

title: Nascondere le funzioni ausiliarie

- Due modi:
    - Se la funzione accede ai dati dell‚Äôoggetto: funzione membro privata
    - Se la funzione non accede ai dati dell‚Äôoggetto: nel namespace senza nome del file di implementazione (oppure nel namespace della classe)
