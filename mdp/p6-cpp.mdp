title: Modern C++
subtitle: Introduzione alla programmazione
figure: images/dev/cpp.png

---

title: Hello, C++

- File sorgente: `hello.cpp`
- `cout`: output su console, op. di *inserimento* `<<`

code: c++

    #include <iostream>
    using namespace std;

    int main() {
        cout << "Hello, C++!" << endl;  // two chained insertions
    }

code: shell

    g++ hello.cpp -o hello.exe

>

[Strumenti software](intro.html#10)

---

title: Leggere e scrivere

- `cin`: input da console, op. di *estrazione* `>>`
    - Lettura fino al primo *whitespace* (spazio o altro)
- `getline(cin, line)`: lettura intera riga

code: c++

    #include <iostream>
    using namespace std;

    int main() {
        float weight, height;
        cout << "Weight (kg) and height (m)?" << endl;
        cin >> weight >> height;  // two chained extractions
        cout << "Your BMI is " << weight / (height*height) << endl;
    }

---

title: Tipizzazione statica
figure: images/algo/my-shoes.png

- Una delle differenze principali: le comuni variabili non sono *riferimenti*, ma *contenitori* di dati
    - Occorrono **dichiarazioni** di tipo
    - Ma possibile *type inference* (`auto`)
- Tipi principali: `int`, `float` e `double`, `bool`, `string` e `char`

code: c++

    int x = 10;
    double h = 3.7;
    string txt = "hello";

code: c++

    auto x = 10;          // type inference
    auto h = 3.7;
    auto txt = "hello"s;  // recent compiler

---

title: Operazioni di base

- Operazioni su numeri: `+, -, *, /, %`
    - Anche incremento e decremento unitario: `++, --`
    - *Attenzione*: la divisione tra interi dÃ  risultato intero (`trunc`); il resto puÃ² essere negativo
    - Assegnamento: `=, +=, -=` ...
    - Confronti: `>, >=, <, <=, !=, ==`
    - *Attenzione*: i confronti **non** si possono concatenare
- Operazioni booleane (and, or, not): `&&, ||, !`

code: c++

    cout << (3 < 5) << endl;           // 1
    cout << (3 < 5 < 4) << endl;       // 1 (!)
    cout << (3 < 5 && 5 < 4) << endl;  // 0

---

title: Stringhe

- `string`: sequenza *mutabile* di byte (tipo `char`)
- Operazioni di confronto; concatenazione: `+`
- *Attenzione*: apici doppi per valori `string`, singoli per `char`

code: c++

    string sentence = "Lorem ipsum";
    sentence[6] = 'I';
    char c = sentence[6];  // 'I'
    cout << c << " " << int(c) << endl;  // I 73

    int n = 5;
    string txt = to_string(n);
    int val = stoi(txt);  // see also `stod`, `stof`...

---

title: Selezione
figure: images/algo/words.svg

code: c++

    string a, b;
    cin >> a >> b;

    if (a < b) {
        cout << "The words are ordered" << endl;
    } else if (a > b) {
        cout << "The words are inverted" << endl;
    } else {
        cout << "The words are equal" << endl;
    }

>

[Selezioni in Python](p1-algoritmi.html#19)

[Strutture di controllo in C++](https://cppguide.readthedocs.io/en/latest/cpp/control.html)

---

title: Iterazioni
figure: images/algo/sentinel.svg

code: c++

    int val, total = 0, count = 0;
    cout << "Val (0 to finish)? ";
    cin >> val;
    while (val != 0) {
        total += val;
        ++count;
        cout << "Val (0 to finish)? ";
        cin >> val;
    }
    if (count > 0) {
        cout << "Avg: " << total / float(count) << endl;
    }

>

[Iterazioni in Python](p1-algoritmi.html#21)

[Strutture di controllo in C++](https://cppguide.readthedocs.io/en/latest/cpp/control.html)

---

title: Cicli while e for

- Cicli tipici:
    - Inizializzazione della variabile di ciclo
    - Test sulla variabile di ciclo
    - Aggiornamento della variabile di ciclo

code: c++

    int i = 0;                     // for each i : 0 <= i < 5
    while (i < 5) {
        cout << i * i << endl;
        ++i;
    }

code: c++

    for (int i = 0; i < 5; ++i) {  // for each i : 0 <= i < 5
        cout << i * i << endl;
    }

---

title: Funzioni

code: c++

    #include <cmath>
    #include <iostream>
    using namespace std;

    double hypotenuse(double a, double b) {
        auto c = sqrt(a * a + b * b);
        return c;
    }

    int main() {
        auto side1 = 3.0, side2 = 4.0;
        auto side3 = hypotenuse(side1, side2);
        cout << "3rd side: " << side3 << endl;
    }

>

[Funzioni in Python](p2-oggetti.html#2)

---

title: ðŸ¤” Parametri per riferimento

- Parametri per riferimento (`&`) sono *alias*
    - Le modifiche riguardano anche le variabili esterne
    - Limitarne l'uso!

code: c++

    // pass by reference: external vars can be modified
    void swap(int& m, int& n) {
        int tmp = m;
        m = n; n = tmp;
    }

    int main() {
        int a = 5, b = 7;
        swap(a, b);
        cout << a << " " << b << endl;
    }

---

title: Strutture in g2d

- Composizione di tipi elementari in strutture composte
    - Possibile alternativa alle tuple di Python
- Le seguenti `struct` sono definite in `g2d/actor.hpp`

code: c++

    struct Point { int x, y; };
    struct Rect { int x, y, w, h; };
    struct Color { int r, g, b; };

- Compilare un programma `g2d`
    - *Linux*: `g++ -pthread ...`
    - *Windows*: `g++ -lws2_32 -lwsock32 ...`

---

title: Grafica con g2d

code: c++

    #include "g2d/canvas.hpp"  // use your path!
    auto x = 50, y = 50, dx = 5, dy = 0;
    auto image = g2d::load_image("ball.png");

    void tick() {
        if (g2d::key_pressed("LeftButton")) { dx = -dx; }
        g2d::clear_canvas();
        g2d::draw_image(image, {x, y});
        x += dx;
    }
    int main() {
        g2d::init_canvas({480, 360});
        g2d::main_loop(tick);
    }


>

[Compilare un programma g2d](https://github.com/tomamic/fondinfo/blob/master/cpp/README.md)

---

title: Numeri casuali

code: c++

    #include <iostream>
    #include <cstdlib>
    #include <ctime>
    using namespace std;

    int main() {
        srand(time(nullptr));           // just once! (initial seed
                                        // for random numbers)
        for (int i = 0; i < 10; ++i) {
            int r = 1 + rand() % 90;    // random value: 1 <= r <= 90
            cout << r << endl;
        }
    }

>

In alternativa (con estremi inclusi): `g2d::randint(1, 90)`

---

title: Vector, array dinamici
figure: images/fun/shopping-list.jpg

code: c++

    #include <vector>

code: c++

    vector<string> grocery = {"spam", "egg", "beans"};  // init list
    cout << grocery[1] << endl;  // egg
    cout << grocery.size() << endl;  // 3
    grocery[0] = "sausage";  // replace an elem

    grocery.push_back("bacon");  // add elem to the end
    grocery.pop_back();  // remove last elem

>

[Liste in Python](p3-composizione.html#3)

---

title: For su sequenze dati

code: c++

    vector<string> grocery = {"spam", "egg", "beans"};
    for (auto product : grocery) {  // for each product in grocery
        cout << product << endl;
    }

code: c++

    string text = "eureka!";
    for (auto c : text)  {  // for each char in text
        cout << c << ' ' << int(c) << endl;
    }

>

[Cicli su liste in Python](p3-composizione.html#4)

---

title: Vector come pseudo-matrice

code: c++

    vector<int> matrix = { 2, 4, 3, 8,
                           9, 3, 2, 7,
                           5, 6, 9, 1 };
    auto cols = 4, rows = 3;  // rows = matrix.size() / cols;

    for (auto x = 0; x < cols; ++x) {
        auto total = 0;
        for (auto y = 0; y < rows; ++y) {
            total += matrix[y * cols + x];
        }
        cout << "Col #" << x << " sums to " << total << endl;
    }

>

[Pseudo-matrice in Python](p5-matrici.html#10)

---

title: Allocazione di vector

- Metodo `assign` per allocare un `vector`
    - *Dimensione* nota
    - *Valore iniziale* uguale per tutti gli elementi

code: c++

    vector<string> some_list;
    some_list.assign(10, ""); // some_list contains 10 strings

- Si possono usare anche `vector` di `vector`... ðŸ¤”

code: c++

    auto rows = 3, cols = 4, y = 1, x = 2;
    vector<vector<char>> some_matrix;
    some_matrix.assign(rows, vector<char>(cols, '-'));
    cout << some_matrix[y][x] << endl;

---

title: Iteratori ed algoritmi
figure: images/fun/iterator.png
class: large-figure

code: c++

    #include <algorithm>
    // count, find, sort etc.

code: c++

    // insert at index 1, other elems shift
    grocery.insert(grocery.begin() + 1, "bacon");
    // remove elem at index 1, other elems shift back
    grocery.erase(grocery.begin() + 1);

code: c++

    auto pos = find(grocery.begin(), grocery.end(), "egg");
    if (pos != grocery.end()) {
        // true, grocery contains "egg"
        grocery.erase(pos);
    }

>

[Liste in Python](p3-composizione.html#6)

---

title: Puntatori
figure: images/oop/pointer.png

- Ogni dato presente in memoria ha un indirizzo: variabile puntatore per memorizzarlo
    - Operatore `&` per indirizzo di un dato
    - Op. `*` per accesso a dato puntato (*dereferenziazione*)

code: c++

    char i = 56;  // a byte
    char* p;      // a ptr to some byte (uninitialized)
    p = &i;       // now p points to i
    *p = *p + 1;  // ++i
    p = nullptr;  // ptr to nothing

---

title: Oggetti
class: segue dark

---

title: Definizione di una classe
figure: images/oop/ball-object.svg images/oop/ball-uml.svg
figcaption: Class diagram UML

code: c++

    class Ball {
        int x_, y_;             // private stuff
        int dx_ = 5, dy_ = 5;
    public:
        Ball(int x0, int y0) {  // constructor
            x_ = x0; y_ = y0;
        }
        void Ball::move() {
            if (x_+dx_<0 || x_+dx_>ARENA_W) dx_ = -dx_;
            if (y_+dy_<0 || y_+dy_>ARENA_H) dy_ = -dy_;
            x_ += dx_; y_ += dy_;
        }
        int Ball::pos_x() { return x_; }
        int Ball::pos_y() { return y_; }
    };

---

title: Creazione ed uso degli oggetti
figure: images/oop/balls.png

code: c++

    int main() {
        Ball b1{40, 80};
        Ball b2{80, 40};

        for (auto i = 0; i < 25; ++i) {
            b1.move();
            b2.move();
            cout << b1.pos_x() << ", " << b1.pos_y() << endl;
            cout << b2.pos_x() << ", " << b2.pos_y() << endl << endl;
        }
    }

>

[ball.cpp](https://github.com/tomamic/fondinfo/blob/master/cpp/ball.cpp)

---

title: Allocazione dinamica

code: c++

    auto b1 = Ball{40, 80};      // Ball
    auto b2 = new Ball{80, 40};  // Ball*
    //Ball* alias1 = &b1;        // no new ball is created
    //Ball* alias2 = b2;         // no new ball is created

    for (auto i = 0; i < 25; ++i) {
        b1.move();
        b2->move();
        cout << b1.pos_x() << ", " << b1.pos_y() << endl;
        cout << b2->pos_x() << ", " << b2->pos_y() << endl << endl;
    }
    delete b2;

- No *garbage collection*: a `new` deve corrispondere `delete`

---

title: Cppyy: Chiamare C++ da Python

code: shell

    pip3 install cppyy

code: py

    import cppyy
    cppyy.include("ball.cpp")
    from cppyy.gbl import Ball

    b = Ball(150, 200)
    for i in range(10):
        b.move()
        print(b.pos_x(), b.pos_y())

>

[ball.py](https://github.com/tomamic/fondinfo/blob/master/cpp/ball.py)

---

title: Livelli di astrazione
class: segue dark

---

title: Fattoria parlante
figure: images/oop/animals.png

- *Classe base* come **interfaccia astratta**
- Es. `Animal`:
    - Tutti fanno un verso (*interfaccia*)
    - Ognuno lo fa diverso (*polimorfismo*)

code: c++

    class Animal {
    public:
        virtual void say() = 0;
    };

- Un metodo `virtual` *puÃ²* essere (ri)definito dalle sottoclassi
- Un metodo `=0` *deve* essere definito dalle sottoclassi

---

title: Classi concrete
figure: images/oop/polymorphism.png

code: c++

    class Dog : public Animal {
        string name_;
    public:
        Dog(string name) { name_ = name; }
        void say() {
            cout << "I am " << name_ << " Dog. "
                 << "I say: WOOF!" << endl;
        }
    };
    class Cat : public Animal {
        /* ... */
        void say() {
            cout << "I am " << name_ << " Cat. "
                 << "I say: MEOW!" << endl;
        }
    };

---

title: Lista di puntatori ad oggetti
figure: images/oop/peppa.png

code: c++

    auto d = Dog("Danny");
    auto c = Cat("Candy");
    auto p1 = Pig("Peppa");
    auto p2 = Pig("George");
    // polimorphism requires pointers to objects
    vector<Animal*> animals = {&d, &c, &p1, &p2};
    for (auto a : animals) { a->say(); }

code: output

    I am Danny Dog. I say: WOOF!
    I am Candy Cat. I say: MEOW!
    I am Peppa Pig. I say: OINK!
    I am George Pig. I say: OINK!

>

[animals.cpp](https://github.com/tomamic/fondinfo/blob/master/cpp/animals.cpp)

---

title: Metodi virtuali puri
figure: images/oop/actor.svg

- Es.: metodo `move` di `Actor`
    - `virtual`: il metodo puÃ² essere ridefinito nelle sottoclassi (*polimorfo*)
    - `= 0`: il metodo non Ã¨ implementato qui (la classe Ã¨ *astratta*)
    - Polimorfismo C++ funziona solo con puntatori a oggetti

code: c++

    class Actor {
        virtual void move() = 0;
        // ...
    };

>

[actor.hpp](https://github.com/tomamic/fondinfo/blob/master/cpp/g2d/actor.hpp) -
[bounce.hpp](https://github.com/tomamic/fondinfo/blob/master/cpp/bounce.hpp) -
[bounce.cpp](https://github.com/tomamic/fondinfo/blob/master/cpp/bounce.cpp)

---

title: Fifteen â€“ Gioco astratto
figure: images/qt/fifteen-puzzle.jpg

code: C++

    class BoardGame {
    public:
        virtual void play_at(int x, int y) = 0;
        virtual void flag_at(int x, int y) = 0;
        virtual int cols() = 0;
        virtual int rows() = 0;
        virtual string value_at(int x, int y) = 0;
        virtual bool finished() = 0;
        virtual string message() = 0;

        virtual ~BoardGame() {}
    };

>

[boardgame.hpp](https://github.com/tomamic/fondinfo/blob/master/cpp/g2d/boardgame.hpp) -
[fifteen.cpp](https://github.com/tomamic/fondinfo/blob/master/cpp/fifteen.cpp) -
[lightsout.cpp](https://github.com/tomamic/fondinfo/blob/master/cpp/lightsout.cpp)

---

title: ðŸ¤” Compilazione separata

- C++: definizione della classe separata dalla implementazione dei metodi
    - Definizione fornita agli utenti
    - Implementazione compilata in libreria
- Sorgenti organizzati in 3 file:
    - `ball.h` â€“ definizione della classe
    - `ball.cpp` â€“ implementazione dei metodi
    - `main.cpp` â€“ applicazione che usa la classe
    - Dall'ambiente di sviluppo: *Add new â†’ C++ Class*

---

title: ðŸ¤” Definizione: ball.h
figure: images/oop/ball-object.svg images/oop/ball-uml.svg
figcaption: Class diagram UML

code: c++

    #ifndef BALL_H  // to avoid multiple definitions
    #define BALL_H

    class Ball {
        int x_, y_;  // private stuff
        int dx_ = 5, dy_ = 5;
    public:
        Ball(int x0, int y0);  // just declarations
        void move();
        int pos_x();
        int pos_y();
    };

    #endif // BALL_H

---

title: ðŸ¤” Implementazione: ball.cpp
figure: images/oop/anim-bounce.png

code: c++

    #include "ball.h"

    const int ARENA_W = 480, ARENA_H = 360;

    Ball::Ball(int x0, int y0) {
        x_ = x0; y_ = y0;
    }
    void Ball::move() {
        if (x_ + dx_ < 0 || x_ + dx_ > ARENA_W) dx_ = -dx_;
        if (y_ + dy_ < 0 || y_ + dy_ > ARENA_H) dy_ = -dy_;
        x_ += dx_; y_ += dy_;
    }
    int Ball::pos_x() { return x_; }
    int Ball::pos_y() { return y_; }

---

title: ðŸ¤” Applicazione: main.cpp
figure: images/oop/balls.png

code: c++

    #include "ball.h"
    // ...
    int main() {
        Ball b1{40, 80}, b2{80, 40};

        for (auto i = 0; i < 25; ++i) {
            b1.move(); b2.move();
            cout << b1.pos_x() << ", " << b1.pos_y() << endl;
            cout << b2.pos_x() << ", " << b2.pos_y() << endl << endl;
        }
    }

code: shell

    g++ -c ball.cpp
    g++ -c main.cpp
    g++ -o ball ball.o main.o

---

title: ðŸ¤” Swig: C++ per moduli Python

code: file: ball.i

    %module ball
    %include "std_string.i"
    %{
    #include "ball.h"  /* Include the header in the wrapper code */
    %}
    %include "ball.h"  /* Parse the header to generate wrappers */

code: shell

    swig -python -c++ ball.i
    g++ -fPIC -shared *.cpp *.cxx -I/usr/include/python3.7m -o _$module.so

code: py

    from ball import Ball
    b = Ball(150, 200)
    for i in range(10):
        b.move()
        print(b.pos_x(), b.pos_y())

---

title: ðŸ¤” Do-while
class: break

code: c++

    int val, tot = 0, count = 0;
    do {
        cout << "Val (0 to end)? ";
        cin >> val;
        if (val != 0) {
            tot += val;
            ++count;
        }
    } while (val != 0);  // the check is at the end
    if (count > 0) {
        cout << "Avg: " << tot / float(count);
    }

---

title: ðŸ¤” Switch

code: c++

    int choice; cin >> choice;
    switch (choice) {
        case 1: cout << "First option"; break;
        case 2: cout << "Second option"; break;
        default: cout << "Error";
    }
