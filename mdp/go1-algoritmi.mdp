title: Algoritmi in Go
subtitle: Introduzione alla programmazione
figure: images/algo/rubik-cube.png

---

title: Less is exponentially more

- Progetto avviato nel ~2007 presso Google, partendo dal C
    - Pionieri di Unix: Rob *Pike* e Ken *Thompson*, con Robert Griesemer
    - Libro: ‚ÄúThe Go Programming Language‚Äù by Brian W. *Kernighan*, Alan Donovan
- Pochi concetti, tra loro ortogonali
    - Senza *eccezioni*, n√© *template*, n√© *ereditariet√†*
    - *Interfacce* e *duck typing*, *Type inference*
    - *Garbage collection*, ma codice *nativo* (senza macchina virtuale)
    - *Communicating sequential processes*

>

Dopo una presentazione di 35 nuove caratteristiche del C++11, durante le pause per compilare codice C++...
<https://commandcenter.blogspot.it/2012/06/less-is-exponentially-more.html>

---

title: Hello, browser!
figure: images/algo/helloworld.png

- Esecuzione parte da funzione **`main`** in modulo `main`
- Modulo speciale **`g2d`** per disegno ecc.
- **`g2d.Alert`**: *messaggio in finestra di dialogo*

code: go

    package main

    import . "g2d"

    func main() {
        Alert("Hello, browser!")
    }

>

<http://www.ce.unipr.it/gopherjs>

---

title: Tipi di dato

- **Tipo di dato**: un insieme di *valori* e le *operazioni* ammesse
    - `int, float64, bool, string`
    - Operazioni aritmetiche e logiche, confronti
- **`int`** o **`float64`**, per numeri interi o reali
    - Operazioni di base: `+, -, *, /, %`
    - Divisione tra interi d√† risultato intero
    - Confronti: `<, <=, >, >=, ==, !=`
-  **`bool`**, per valori booleani: `true, false`
    - Operazioni consentite: `&&, ||, !`
    - I confronti danno un risultato booleano

---

title: Valori numerici e booleani

- **`g2d.Println`**: *scrittura dei risultati parziali*

code: go

    package main

    import . "g2d"

    func main() {
        Println(3.0 / 2)  // 1.5
        Println(3 / 2)    // 1, truncated
        Println(3 % 2)    // 1, reminder
        Println(4 == 5)   // false, do not confuse with assignment!
        Println(2 < 3 || ! true)  // true
    }

---

title: Variabile
figure: images/algo/my-shoes.png

- Le comuni variabili sono *contenitori* di dati
- Occorrono **dichiarazioni** di tipo
    - Valore iniziale `0` o `""`, quando non specificato
- Possibile *type inference* (`:=`)
    - *Tipo* inferito dal valore di inizializzazione

code: go

    var i, j int = 1, 2  // no type inference

    k := 3.2
    ans, txt := true, "no!"

    Println(i, j, k, ans, txt)

---

title: Riassegnamento
figure: images/algo/assign.png
class: large-figure

- Riassegnamento, operatore `=`
    - Alla sinistra una variabile *gi√† definita*
    - Alla destra un valore
- *Non confondere* con confronto di uguaglianza `==`

code: go

    pi := 3.14       // definition and initialization
    radius := 2.2
    area := pi * (radius * radius)
    Println(area)    // 15.1976
    radius = radius + 1
    Println(radius)  // guess radius now
    Println(area)    // ... and area!

---

title: Stringhe di testo

- **`string`** per sequenze di caratteri *Unicode*
- Ogni carattere √® di tipo `rune` (`int32`)
- Primi 128 codici *Unicode* == *ASCII*
- Confronto, in ordine *lessicografico*

code: go

    str1 := "Hello,"
    str2 := " üåê"
    result := str1 + str2
    Println(result)              // "Hello, üåê"

    Println("first" < "second")  // true
    Println("Second" < "first")  // true
    Println('üåê' == 127760)      // true

---

title: ‚è© Tabella ASCII
class: large-image

![](images/repr/ascii.png)

---

title: Leggere e scrivere
figure: images/algo/hello-user.svg

- **`g2d.Prompt`**: *ricezione di input dall'utente*
    - Mostra un messaggio
    - Poi blocca il programma in attesa
    - Risultato sempre di tipo `string`

code: go

    user := Prompt("What's your name?")
    Alert("Hello, ", user)

---

title: Somma di tre numeri
figure: images/algo/sum3.svg

- **`g2d.ToInt`**: conversione da `string` a `int`
- **`g2d.ToFloat`**: conversione da `string` a `float64`

code: go

    a := ToFloat(Prompt("Insert 1st val"))
    b := ToFloat(Prompt("Insert 2nd val"))
    c := ToFloat(Prompt("Insert 3rd val"))

    total := a + b + c
    Alert("The sum is ", total)

>

<http://www.ce.unipr.it/gopherjs/?p1_sum3.go>

---

title: Strutture per grafica
figure: images/repr/additive-color.svg

- Strutture e funzioni definite nel modulo `g2d`

code: go

    type Point struct{ X, Y int }
    type Rect struct{ X, Y, W, H int }
    type Color struct{ R, G, B int }

code: go

    center := Point{150, 100}
    rectangle := Rect{150, 100, 200, 200}  // square
    myBlue := Color{10, 10, 200}  // each component in 0..255

---

title: Disegno nel browser
figure: images/oop/raster-coord.png

code: go

    // width, height
    InitCanvas(Point{640, 480})

    // red + green = yellow
    SetColor(Color{255, 255, 0})
    // left, top, width, height
    FillRect(Rect{150, 100, 250, 200})

    SetColor(Color{0, 0, 255})
    // center, radius
    FillCircle(Point{400, 300}, 20)

    // manage the window/canvas
    MainLoop()

---

title: Linee e testi
figure: images/oop/raster-coord.png

code: go

    SetColor(Color{0, 255, 0})
    // from, to
    DrawLine(Point{150, 100}, Point{400, 300})

    SetColor(Color{255, 0, 0})
    // text, left-top corner, font-size
    DrawText("Hello", Point{150, 100}, 40)

>

<http://www.ce.unipr.it/gopherjs/?p1_draw.go>

---

title: Strutture di controllo
class: segue dark

---

title: Selezione: if
figure: images/algo/if.svg

- Corpo di `if` o `else` tra graffe
    - *Indentazione* per migliore leggibilit√†
    - Pu√≤ contenere qualsiasi istruzione
    - Anche altri blocchi `if` o `for` annidati!

code: go

    radius := ToInt(Prompt("Radius? [50-99]"))

    if 50 <= radius && radius <= 99 {
        SetColor(Color{0, 0, 255})
        FillCircle(Point{200, 200}, radius)
    }

    SetColor(Color{255, 255, 0})
    FillCircle(Point{200, 200}, 25)

---

title: Selezione: else
figure: images/algo/if-else.svg

- Clausola `else`: opzionale
    - Eseguita sse la condizione non √® verificata

code: go

    radius := ToInt(Prompt("Radius? [50-99]"))

    if 50 <= radius && radius <= 99 {
        SetColor(Color{0, 0, 255})
        FillCircle(Point{200, 200}, radius)
    } else {
        Alert("Out of range!")
    }

    SetColor(Color{255, 255, 0})
    FillCircle(Point{200, 200}, 25)

>

<http://www.ce.unipr.it/gopherjs/?p1_if_else.go>

---

title: Confronto tra parole
figure: images/algo/words.svg

code: go

    a := Prompt("First word?")
    b := Prompt("Second word?")

    if a < b {
        Alert("The words are ordered")
    } else if a > b {
        Alert("The words are inverted")
    } else {
        Alert("The words are equal")
    }

---

title: ‚è© Operazioni aritmetiche
figure: images/algo/calc.svg

code: go

    a := ToFloat(Prompt("a?"))
    b := ToFloat(Prompt("b?"))
    op := Prompt("op?")

    if op == "+" {
        Alert(a + b)
    } else if op == "-" {
        Alert(a - b)
    } else if op == "*" {
        Alert(a * b)
    } else if op == "/" && b != 0 {
        Alert(a / b)
    } else {
        Alert("Operation not allowed")
    }

---

title: Iterazione: for
figure: images/algo/count.svg

- Condizione di *permanenza* nel ciclo
- Controllo *preliminare*: possibile che il corpo non sia mai eseguito
- *Problem solving*: sommare tutti i numeri da 1 ad `n`
    - Devo almeno saper contare fino ad `n`

code: go

    n := ToInt(Prompt("n?"))
    count := 1

    for count <= n {
        Alert(count)
        count = count + 1
    }

---

title: Somma di numeri consecutivi
figure: images/algo/sum1n.svg

- Occorre tenere traccia del *totale parziale*

code: go

    // Sum of the numbers from 1 to n
    n := ToInt(Prompt("n?"))
    total := 0
    count := 1

    for count <= n {
        total = total + count
        count = count + 1
    }
    Alert("The sum is ", total)

>

<http://it.wikipedia.org/wiki/Gauss#Biografia>

---

title: Media di N campioni
figure: images/algo/average.svg

code: go

    n := ToInt(Prompt("How many values?"))
    total := 0
    count := 0

    for count < n {
        val := ToInt(Prompt("Val?"))
        total += val  // total = total + val
        count += 1    // count = count + 1
    }
    if count != 0 {
        Alert("The average is ",
              float64(total) / float64(count))
    }

- **Cast**: `int(x)` oppure `float64(x)` ecc.
- Conversione di un numero `x` nel tipo corretto

---

title: Ciclo con sentinella
figure: images/algo/sentinel.svg

code: go

    count := 0
    total := 0
    val := ToInt(Prompt("Val? (0 to finish)"))

    for val != 0 {
        total += val
        count += 1
        val = ToInt(Prompt("Val? (0 to finish)"))
    }
    if count != 0 {
        Alert("The average is ",
              float64(total) / float64(count))
    }

>

<http://www.ce.unipr.it/gopherjs/?p1_average.go>

<http://www.ce.unipr.it/gopherjs/?p1_sentinel.go>

---

title: ü§î Quadrato perfetto
figure: images/algo/perfect-square.svg

code: go

    n := ToInt(Prompt("n?"))

    i := 1
    for i*i < n {
        i += 1
    }
    if i*i == n {
        Alert(i)
    } else {
        Alert("No")
    }

>

<http://www.ce.unipr.it/gopherjs/?p1_perfect_square.go>

---

title: Cicli su intervalli
figure: images/algo/sum10.svg

- Incremento e decremento: `++`, `--`

code: go

    // Add up numbers from 1 to 10

    total := 0
    for i := 1; i < 11; i++ {
        total += i
    }

    // total := 0
    // i := 1
    // for i < 11 {
    //     total = total + i
    //     i = i + 1  // i++
    // }

---

title: Sequenza di quadrati
figure: images/misc/red-squares.png

code: go

    InitCanvas(Point{300, 300})

    for i := 0; i < 5; i++ {
        x := i * 40
        y := x
        red := i * 60
        SetColor(Color{red, 0, 0})
        FillRect(Rect{x, y, 140, 140})
    }

>

<http://www.ce.unipr.it/gopherjs/?p1_red_squares.go>

---

title: Moduli

code: go

    package main

    import "math"   // Math functions, use prefix
    import . "g2d"  // Import everything, skip prefix

    func main() {
        y := math.Sin(math.Pi / 4.0)
        Println(y)
    }

code: shell

    go run hello.go

>

Sono esportati dai moduli solo i nomi con la prima lettera **maiuscola** <br>

<https://golang.org/pkg/fmt> - <https://golang.org/pkg/math>

---

title: Valori casuali
figure: images/misc/dice.png

- **`g2d.RandInt`**: *generazione di numeri casuali*
    - Risultato compreso tra i due valori specificati

code: go

    package main

    import . "g2d"

    func main() {
        die1 := RandInt(1, 6)  // like rolling a die
        die2 := RandInt(1, 6)  // like rolling a die
        Println(die1, die2)
    }

---

title: Esercizi
class: segue dark

---

title: 1.1 Cerchio
figure: images/misc/greek-pi.png

- Chiedere all'utente il valore del raggio `r` di un cerchio
    - `r` reale compreso tra 0 e 200
- Se `r` √® valido
    - Visualizzare il cerchio
    - Mostrare il valore dell'area e della circonferenza
- Se invece `r` √® fuori range
    - Mostrare un messaggio d'errore

---

title: 1.2 Minore e maggiore
figure: images/misc/three-brothers.png

- Generare e stampare tre numeri interi casuali: `a`, `b`, `c`
- Ciascuno compreso tra 1 e 6
- Determinare e mostrare qual √® il minore dei tre

>

Controllare prima di tutto se `a` √® minore degli altri due <br>
Altrimenti controllare se `b` √® minore di `c` <br>
Altrimenti ...

---

title: 1.3 Calcolo dell'et√†

- Chidere all'utente
    - Anno, mese e giorno della data di nascita
    - Anno, mese e giorno corrente
- Comunicare l'et√† esatta
    - Numero di compleanni gi√† compiuti

>

Nell'anno corrente, l'utente ha gi√† avuto il compleanno?

Espressione booleana composta con **AND**, **OR**, **NOT**

---

title: 1.4 Quadrati casuali
figure: images/misc/random-squares.png

- Chiedere all'utente un numero `n`
- Disegnare `n` quadrati
    - Tutti con lato di 100 pixel
    - Ciascuno in posizione casuale
    - Ciascuno con un colore casuale

>

Cominciare a disegnare un solo quadrato grigio, in posizione casuale

---

title: 1.5 Cerchi concentrici
figure: images/misc/red-circles.png

- Chiedere all'utente il numero di cerchi da disegnare
- Disegnare i cerchi con raggio gradualmente decrescente, ma tutti con lo stesso centro
- Far variare il colore dei cerchi
      - Dal rosso del livello pi√π esterno
      - Fino al nero del livello pi√π interno
- Prima del ciclo, determinare di quanto cambiare raggio e colore ad ogni passo

>

Per iniziare, inserire l'operazione di disegno un ciclo, togliendo ad ogni passo `10` (p.es.) al raggio e al livello di rosso

---

title: 1.6 Numero segreto
figure: images/misc/bingo-balls.png

- Generare all'inizio del programma un numero ‚Äúsegreto‚Äù a caso tra 1 e 90
- Chiedere ripetutamente all'utente di immettere un numero, finch√© non indovina quello generato
- Ad ogni tentativo, dire se il numero immesso √® maggiore o minore del numero segreto

---

title: ü§î 1.7 Resistenze, ciclo
figure: images/misc/resistors.png

- Leggere, attraverso un ciclo, una sequenza di valori di resistenze elettriche
- La sequenza termina quando l'utente immette il valore 0
- Alla fine, visualizzare la resistenza equivalente, sia nel caso di resistenze disposte in serie, che in parallelo

>

Formule utili:

R~~s~~ = ‚àë R~~i~~

1/R~~p~~ = ‚àë (1/R~~i~~)

---

title: ü§î 1.8 Orologio classico
figure: images/misc/classical-watch.jpg

- Disegnare 12 tacche a raggiera, come in un orologio classico
- Miglioramento: disegnare anche le tacche dei minuti, pi√π piccole

>

Usare `math.Sin` e `math.Cos` per determinare le posizioni in cui disegnare

---

title: ü§î 1.9 La stanza del mostro
figure: images/misc/monster.png

- Il giocatore si muove su una scacchiera di 5x5 celle, partendo da un angolo
    - Le righe e le colonne sono numerate da 0 a 4
- Un tesoro ed un mostro sono nascosti in due posizioni casuali, all'inizio del gioco
- Ad ogni turno, il giocatore:
    - Sceglie una direzione verso cui spostarsi (alto, basso, sinistra, destra)
    - Se capita sulla cella del tesoro, ha vinto
    - Se capita sulla cella del mostro, ha perso

>

Basta memorizzare tre coppie di coordinate cartesiane

Non √® richiesto di utilizzare la grafica
